
fancy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003874  08003874  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003874  08003874  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800387c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000005c  080038d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080038d8  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acf6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8b  00000000  00000000  0002adbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092d  00000000  00000000  0002d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bdb  00000000  00000000  0002e255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0ff  00000000  00000000  00045e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be14  00000000  00000000  00052f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036ac  00000000  00000000  000ded44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e23f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037ec 	.word	0x080037ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080037ec 	.word	0x080037ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <__aeabi_f2uiz>:
 8000664:	0042      	lsls	r2, r0, #1
 8000666:	d20e      	bcs.n	8000686 <__aeabi_f2uiz+0x22>
 8000668:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800066c:	d30b      	bcc.n	8000686 <__aeabi_f2uiz+0x22>
 800066e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000672:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000676:	d409      	bmi.n	800068c <__aeabi_f2uiz+0x28>
 8000678:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800067c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000680:	fa23 f002 	lsr.w	r0, r3, r2
 8000684:	4770      	bx	lr
 8000686:	f04f 0000 	mov.w	r0, #0
 800068a:	4770      	bx	lr
 800068c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000690:	d101      	bne.n	8000696 <__aeabi_f2uiz+0x32>
 8000692:	0242      	lsls	r2, r0, #9
 8000694:	d102      	bne.n	800069c <__aeabi_f2uiz+0x38>
 8000696:	f04f 30ff 	mov.w	r0, #4294967295
 800069a:	4770      	bx	lr
 800069c:	f04f 0000 	mov.w	r0, #0
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <HAL_GPIO_EXTI_Callback>:

static tm1637_t g_tm1637;
static DHT_t    g_dht11;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
	if(!g_fancy.is_initialzed) {
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	f083 0301 	eor.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d108      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x2a>
		return;
	}

  if(GPIO_Pin == g_dht11.pin) {
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_GPIO_EXTI_Callback+0x38>)
 80006be:	891b      	ldrh	r3, [r3, #8]
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d104      	bne.n	80006d0 <HAL_GPIO_EXTI_Callback+0x2c>
    DHT_pinChangeCallBack(&g_dht11);
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_GPIO_EXTI_Callback+0x38>)
 80006c8:	f000 fb27 	bl	8000d1a <DHT_pinChangeCallBack>
 80006cc:	e000      	b.n	80006d0 <HAL_GPIO_EXTI_Callback+0x2c>
		return;
 80006ce:	bf00      	nop
  }
}
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000078 	.word	0x20000078
 80006dc:	20000094 	.word	0x20000094

080006e0 <fancy_init>:

static void fancy_init(TIM_HandleTypeDef *dht11_tim) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
	tm1637_init(&g_tm1637, TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, TM1637_DIO_GPIO_Port, TM1637_DIO_Pin);
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <fancy_init+0x44>)
 80006ee:	2220      	movs	r2, #32
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <fancy_init+0x44>)
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <fancy_init+0x48>)
 80006f4:	f002 f9fe 	bl	8002af4 <tm1637_init>
	tm1637_show_zero(&g_tm1637, true);
 80006f8:	2101      	movs	r1, #1
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <fancy_init+0x48>)
 80006fc:	f002 fba2 	bl	8002e44 <tm1637_show_zero>

	DHT_init(&g_dht11, DHT_Type_DHT11, dht11_tim, 8 /*MHz system clock*/, DHT11_DATA_GPIO_Port, DHT11_DATA_Pin);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <fancy_init+0x44>)
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2308      	movs	r3, #8
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	2100      	movs	r1, #0
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <fancy_init+0x4c>)
 8000710:	f000 fc45 	bl	8000f9e <DHT_init>

	g_fancy.is_initialzed = true;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <fancy_init+0x50>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40010c00 	.word	0x40010c00
 8000728:	20000084 	.word	0x20000084
 800072c:	20000094 	.word	0x20000094
 8000730:	20000078 	.word	0x20000078

08000734 <fancy_heartbeat>:

static void fancy_heartbeat(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <fancy_heartbeat+0x4c>)
 8000740:	f001 fa13 	bl	8001b6a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f000 fe47 	bl	80013d8 <HAL_Delay>
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <fancy_heartbeat+0x4c>)
 8000752:	f001 fa0a 	bl	8001b6a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000756:	2064      	movs	r0, #100	; 0x64
 8000758:	f000 fe3e 	bl	80013d8 <HAL_Delay>
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <fancy_heartbeat+0x4c>)
 8000764:	f001 fa01 	bl	8001b6a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f000 fe35 	bl	80013d8 <HAL_Delay>
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <fancy_heartbeat+0x4c>)
 8000776:	f001 f9f8 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40011000 	.word	0x40011000

08000784 <fancy_tm1637_display_update>:

static void fancy_tm1637_display_update() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	static int32_t count = 0;
	tm1637_brightness(&g_tm1637, 3);
 8000788:	2103      	movs	r1, #3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <fancy_tm1637_display_update+0x28>)
 800078c:	f002 f9f6 	bl	8002b7c <tm1637_brightness>
	//tm1637_write_int(&g_tm1637, g_fancy.temp, 0);
	//uint8_t small_t = 0x0f;
	//tm1637_write_segment(&g_tm1637, &small_t, sizeof(small_t), 0);
	//tm1637_write_float(&g_tm1637, g_fancy.temp, 1, 0);
	tm1637_write_fractional(&g_tm1637, g_fancy.temp, 1, 0);
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <fancy_tm1637_display_update+0x2c>)
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	2300      	movs	r3, #0
 8000796:	2201      	movs	r2, #1
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <fancy_tm1637_display_update+0x28>)
 800079a:	f002 fa5d 	bl	8002c58 <tm1637_write_fractional>
	count++;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <fancy_tm1637_display_update+0x30>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <fancy_tm1637_display_update+0x30>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000084 	.word	0x20000084
 80007b0:	20000078 	.word	0x20000078
 80007b4:	2000010c 	.word	0x2000010c

080007b8 <fancy_cyclic>:

static void fancy_cyclic(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	fancy_heartbeat();
 80007bc:	f7ff ffba 	bl	8000734 <fancy_heartbeat>
	DHT_readData(&g_dht11, &g_fancy.temp, &g_fancy.humi);
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <fancy_cyclic+0x24>)
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <fancy_cyclic+0x28>)
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <fancy_cyclic+0x2c>)
 80007c6:	f000 fd27 	bl	8001218 <DHT_readData>
	fancy_tm1637_display_update();
 80007ca:	f7ff ffdb 	bl	8000784 <fancy_tm1637_display_update>
  HAL_Delay(700);
 80007ce:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80007d2:	f000 fe01 	bl	80013d8 <HAL_Delay>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000080 	.word	0x20000080
 80007e0:	2000007c 	.word	0x2000007c
 80007e4:	20000094 	.word	0x20000094

080007e8 <fancy>:

void fancy(TIM_HandleTypeDef *dht11_tim) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	fancy_init(dht11_tim);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff75 	bl	80006e0 <fancy_init>

	while(1) {
		fancy_cyclic();
 80007f6:	f7ff ffdf 	bl	80007b8 <fancy_cyclic>
 80007fa:	e7fc      	b.n	80007f6 <fancy+0xe>

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fd88 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f80c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f8ca 	bl	80009a0 <MX_GPIO_Init>
  MX_CAN_Init();
 800080c:	f000 f844 	bl	8000898 <MX_CAN_Init>
  MX_TIM1_Init();
 8000810:	f000 f876 	bl	8000900 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fancy(&htim1);
 8000814:	4801      	ldr	r0, [pc, #4]	; (800081c <main+0x20>)
 8000816:	f7ff ffe7 	bl	80007e8 <fancy>
  while (1)
 800081a:	e7fe      	b.n	800081a <main+0x1e>
 800081c:	20000138 	.word	0x20000138

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	; 0x40
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	2228      	movs	r2, #40	; 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fb4a 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	2310      	movs	r3, #16
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084e:	2300      	movs	r3, #0
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f9b8 	bl	8001bcc <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000862:	f000 f929 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fc26 	bl	80020d0 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800088a:	f000 f915 	bl	8000ab8 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3740      	adds	r7, #64	; 0x40
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_CAN_Init+0x60>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_CAN_Init+0x64>)
 80008a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_CAN_Init+0x60>)
 80008a4:	2210      	movs	r2, #16
 80008a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_CAN_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_CAN_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_CAN_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_CAN_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_CAN_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_CAN_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_CAN_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_CAN_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_CAN_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_CAN_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_CAN_Init+0x60>)
 80008e6:	f000 fd9b 	bl	8001420 <HAL_CAN_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f000 f8e2 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000110 	.word	0x20000110
 80008fc:	40006400 	.word	0x40006400

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM1_Init+0x98>)
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <MX_TIM1_Init+0x9c>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_TIM1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM1_Init+0x98>)
 8000930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_TIM1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_TIM1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_TIM1_Init+0x98>)
 800094a:	f001 fd1d 	bl	8002388 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f8b0 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_TIM1_Init+0x98>)
 8000966:	f001 fda9 	bl	80024bc <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000970:	f000 f8a2 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_TIM1_Init+0x98>)
 8000982:	f001 ff5b 	bl	800283c <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 f894 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000138 	.word	0x20000138
 800099c:	40012c00 	.word	0x40012c00

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a3a      	ldr	r2, [pc, #232]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <MX_GPIO_Init+0x104>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	4829      	ldr	r0, [pc, #164]	; (8000aa8 <MX_GPIO_Init+0x108>)
 8000a04:	f001 f8b1 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY_K1_Pin|RELAY_K2_Pin|RELAY_K3_Pin|RELAY_K4_Pin
 8000a08:	2200      	movs	r2, #0
 8000a0a:	21ff      	movs	r1, #255	; 0xff
 8000a0c:	4827      	ldr	r0, [pc, #156]	; (8000aac <MX_GPIO_Init+0x10c>)
 8000a0e:	f001 f8ac 	bl	8001b6a <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_K7_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TM1637_CLK_Pin|TM1637_DIO_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2160      	movs	r1, #96	; 0x60
 8000a16:	4826      	ldr	r0, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x110>)
 8000a18:	f001 f8a7 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PC13_Pin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a22:	2311      	movs	r3, #17
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0x108>)
 8000a36:	f000 fefd 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_K1_Pin RELAY_K2_Pin RELAY_K3_Pin RELAY_K4_Pin
                           RELAY_K5_Pin RELAY_K6_Pin RELAY_K7_Pin RELAY_K8_Pin */
  GPIO_InitStruct.Pin = RELAY_K1_Pin|RELAY_K2_Pin|RELAY_K3_Pin|RELAY_K4_Pin
 8000a3a:	23ff      	movs	r3, #255	; 0xff
 8000a3c:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_K7_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <MX_GPIO_Init+0x10c>)
 8000a52:	f000 feef 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : TM1637_CLK_Pin TM1637_DIO_Pin */
  GPIO_InitStruct.Pin = TM1637_CLK_Pin|TM1637_DIO_Pin;
 8000a56:	2360      	movs	r3, #96	; 0x60
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a5a:	2311      	movs	r3, #17
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_GPIO_Init+0x110>)
 8000a6e:	f000 fee1 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <MX_GPIO_Init+0x110>)
 8000a86:	f000 fed5 	bl	8001834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2017      	movs	r0, #23
 8000a90:	f000 fe99 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a94:	2017      	movs	r0, #23
 8000a96:	f000 feb2 	bl	80017fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	10310000 	.word	0x10310000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x5c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x60>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_MspInit+0x60>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000

08000b28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_CAN_MspInit+0x8c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d131      	bne.n	8000bac <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_CAN_MspInit+0x90>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_CAN_MspInit+0x90>)
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_CAN_MspInit+0x90>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_CAN_MspInit+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_CAN_MspInit+0x90>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_CAN_MspInit+0x90>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <HAL_CAN_MspInit+0x94>)
 8000b8e:	f000 fe51 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_CAN_MspInit+0x94>)
 8000ba8:	f000 fe44 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40006400 	.word	0x40006400
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <HAL_TIM_Base_MspInit+0x34>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10b      	bne.n	8000bea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_TIM_Base_MspInit+0x38>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_TIM_Base_MspInit+0x38>)
 8000bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_TIM_Base_MspInit+0x38>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c42:	f000 fbad 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DHT11_DATA_Pin);
 8000c4e:	2080      	movs	r0, #128	; 0x80
 8000c50:	f000 ffa4 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f002 f926 	bl	8002ed8 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20005000 	.word	0x20005000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000180 	.word	0x20000180
 8000cc0:	200002d0 	.word	0x200002d0

08000cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd0:	f7ff fff8 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd6:	490c      	ldr	r1, [pc, #48]	; (8000d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cec:	4c09      	ldr	r4, [pc, #36]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f002 f8f3 	bl	8002ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfe:	f7ff fd7d 	bl	80007fc <main>
  bx lr
 8000d02:	4770      	bx	lr
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d0c:	0800387c 	.word	0x0800387c
  ldr r2, =_sbss
 8000d10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d14:	200002d0 	.word	0x200002d0

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>

08000d1a <DHT_pinChangeCallBack>:
#define DHT_delayMs(x)     HAL_Delay(x)
#endif

//###############################################################################################################
void  DHT_pinChangeCallBack(DHT_t *dht)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  dht->time = HAL_GetTick();
 8000d22:	f000 fb4f 	bl	80013c4 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	665a      	str	r2, [r3, #100]	; 0x64
  if(dht->cnt < sizeof(dht->data)-1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d32:	2b52      	cmp	r3, #82	; 0x52
 8000d34:	d81d      	bhi.n	8000d72 <DHT_pinChangeCallBack+0x58>
  {
    dht->data[dht->cnt] = dht->tim->Instance->CNT - dht->lastCNT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	440b      	add	r3, r1
 8000d54:	72da      	strb	r2, [r3, #11]
    dht->lastCNT = dht->tim->Instance->CNT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	669a      	str	r2, [r3, #104]	; 0x68
    dht->cnt++;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  }
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <DHT_delayUs>:
//###############################################################################################################
void  DHT_delayUs(DHT_t *dht, uint16_t DelayUs)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	807b      	strh	r3, [r7, #2]
  dht->tim->Instance->CNT=0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  while(dht->tim->Instance->CNT < DelayUs);  
 8000d90:	bf00      	nop
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3f8      	bcc.n	8000d92 <DHT_delayUs+0x18>
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <DHT_output>:
//###############################################################################################################
void  DHT_output(DHT_t *dht)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio;
  dht->gpio->BSRR = dht->pin;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	891a      	ldrh	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_OD;
 8000dbe:	2311      	movs	r3, #17
 8000dc0:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	617b      	str	r3, [r7, #20]
  gpio.Pin = dht->pin;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	891b      	ldrh	r3, [r3, #8]
 8000dca:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dht->gpio,&gpio);    
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f107 0208 	add.w	r2, r7, #8
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd2a 	bl	8001834 <HAL_GPIO_Init>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <DHT_output_low>:

static void DHT_output_low(DHT_t *dht) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dht->gpio, dht->pin, GPIO_PIN_RESET);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6858      	ldr	r0, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	891b      	ldrh	r3, [r3, #8]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 feb5 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <DHT_output_high>:

static void DHT_output_high(DHT_t *dht) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dht->gpio, dht->pin, GPIO_PIN_SET);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6858      	ldr	r0, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	891b      	ldrh	r3, [r3, #8]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f000 fea5 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <DHT_input>:

//###############################################################################################################
void  DHT_input(DHT_t *dht)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <DHT_input+0x34>)
 8000e32:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	617b      	str	r3, [r7, #20]
  gpio.Pin = dht->pin;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	891b      	ldrh	r3, [r3, #8]
 8000e3c:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dht->gpio,&gpio);    
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f107 0208 	add.w	r2, r7, #8
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fcf1 	bl	8001834 <HAL_GPIO_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	10310000 	.word	0x10310000

08000e60 <DHT_decode>:
//###############################################################################################################
bool  DHT_decode(DHT_t *dht,uint8_t *byteArray)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  int8_t bit;
  switch(dht->type)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7a9b      	ldrb	r3, [r3, #10]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	bf8c      	ite	hi
 8000e72:	2201      	movhi	r2, #1
 8000e74:	2200      	movls	r2, #0
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f040 808a 	bne.w	8000f92 <DHT_decode+0x132>
 8000e7e:	2235      	movs	r2, #53	; 0x35
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf14      	ite	ne
 8000e8c:	2301      	movne	r3, #1
 8000e8e:	2300      	moveq	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d07d      	beq.n	8000f92 <DHT_decode+0x132>
  {
  	case DHT_Type_DHT11:
    case DHT_Type_DHT21:
    case DHT_Type_AM2301:
    case DHT_Type_AM2305:
      if((dht->data[0] < 60) || (dht->data[0] > 100) || (dht->data[1] < 60) || (dht->data[1] > 100))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7adb      	ldrb	r3, [r3, #11]
 8000e9a:	2b3b      	cmp	r3, #59	; 0x3b
 8000e9c:	d90b      	bls.n	8000eb6 <DHT_decode+0x56>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7adb      	ldrb	r3, [r3, #11]
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d807      	bhi.n	8000eb6 <DHT_decode+0x56>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7b1b      	ldrb	r3, [r3, #12]
 8000eaa:	2b3b      	cmp	r3, #59	; 0x3b
 8000eac:	d903      	bls.n	8000eb6 <DHT_decode+0x56>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7b1b      	ldrb	r3, [r3, #12]
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <DHT_decode+0x5a>
        return false;      
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e06c      	b.n	8000f94 <DHT_decode+0x134>
      bit = 7;
 8000eba:	2307      	movs	r3, #7
 8000ebc:	73fb      	strb	r3, [r7, #15]
      for(uint8_t i=0 ; i<80 ; i+=2)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73bb      	strb	r3, [r7, #14]
 8000ec2:	e061      	b.n	8000f88 <DHT_decode+0x128>
      {
        if((dht->data[i+2] >= 35) && (dht->data[i+2] <= 70))
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	7adb      	ldrb	r3, [r3, #11]
 8000ece:	2b22      	cmp	r3, #34	; 0x22
 8000ed0:	d955      	bls.n	8000f7e <DHT_decode+0x11e>
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	7adb      	ldrb	r3, [r3, #11]
 8000edc:	2b46      	cmp	r3, #70	; 0x46
 8000ede:	d84e      	bhi.n	8000f7e <DHT_decode+0x11e>
        {
          if((dht->data[i+3] >= 10) && (dht->data[i+3] <= 45))
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	7adb      	ldrb	r3, [r3, #11]
 8000eea:	2b09      	cmp	r3, #9
 8000eec:	d917      	bls.n	8000f1e <DHT_decode+0xbe>
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	3303      	adds	r3, #3
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8000efa:	d810      	bhi.n	8000f1e <DHT_decode+0xbe>
            *byteArray &= ~(1<<bit); 
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	4013      	ands	r3, r2
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e01e      	b.n	8000f5c <DHT_decode+0xfc>
          else if((dht->data[i+3] >= 55) && (dht->data[i+3] <= 95))
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	3303      	adds	r3, #3
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7adb      	ldrb	r3, [r3, #11]
 8000f28:	2b36      	cmp	r3, #54	; 0x36
 8000f2a:	d915      	bls.n	8000f58 <DHT_decode+0xf8>
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	3303      	adds	r3, #3
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	7adb      	ldrb	r3, [r3, #11]
 8000f36:	2b5f      	cmp	r3, #95	; 0x5f
 8000f38:	d80e      	bhi.n	8000f58 <DHT_decode+0xf8>
            *byteArray |= (1<<bit); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	2101      	movs	r1, #1
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e001      	b.n	8000f5c <DHT_decode+0xfc>
          else
            return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e01b      	b.n	8000f94 <DHT_decode+0x134>
          bit--;
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
          if(bit == -1)
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d107      	bne.n	8000f82 <DHT_decode+0x122>
          {
            bit = 7;
 8000f72:	2307      	movs	r3, #7
 8000f74:	73fb      	strb	r3, [r7, #15]
            byteArray++;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	603b      	str	r3, [r7, #0]
          if(bit == -1)
 8000f7c:	e001      	b.n	8000f82 <DHT_decode+0x122>
          }
        }
        else
          return false;  
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e008      	b.n	8000f94 <DHT_decode+0x134>
      for(uint8_t i=0 ; i<80 ; i+=2)
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	3302      	adds	r3, #2
 8000f86:	73bb      	strb	r3, [r7, #14]
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	2b4f      	cmp	r3, #79	; 0x4f
 8000f8c:	d99a      	bls.n	8000ec4 <DHT_decode+0x64>
      }
    return true;  
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <DHT_decode+0x134>
    default:
      return false;        
 8000f92:	2300      	movs	r3, #0
  }   
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <DHT_init>:
//###############################################################################################################
void  DHT_init(DHT_t *dht, DHT_Type_t type, TIM_HandleTypeDef *tim,uint16_t  timerBusFrequencyMHz, GPIO_TypeDef *gpio, uint16_t  pin)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	460b      	mov	r3, r1
 8000fac:	72fb      	strb	r3, [r7, #11]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	813b      	strh	r3, [r7, #8]
  dht->tim = tim;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
  dht->gpio = gpio;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	605a      	str	r2, [r3, #4]
  dht->pin = pin;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8bba      	ldrh	r2, [r7, #28]
 8000fc2:	811a      	strh	r2, [r3, #8]
  dht->type = type;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	7afa      	ldrb	r2, [r7, #11]
 8000fc8:	729a      	strb	r2, [r3, #10]
  DHT_output(dht); 
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff feee 	bl	8000dac <DHT_output>
  dht->tim->Init.Prescaler = timerBusFrequencyMHz - 1;
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
  dht->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  dht->tim->Init.Period = 0xFFFF;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	60da      	str	r2, [r3, #12]
  dht->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Init(dht->tim);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f9c5 	bl	8002388 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(dht->tim);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fa10 	bl	8002428 <HAL_TIM_Base_Start>
  while(HAL_GetTick()<2000)
 8001008:	e002      	b.n	8001010 <DHT_init+0x72>
    DHT_delayMs(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f000 f9e4 	bl	80013d8 <HAL_Delay>
  while(HAL_GetTick()<2000)
 8001010:	f000 f9d8 	bl	80013c4 <HAL_GetTick>
 8001014:	4603      	mov	r3, r0
 8001016:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800101a:	d3f6      	bcc.n	800100a <DHT_init+0x6c>
  DHT_delayMs(20);
 800101c:	2014      	movs	r0, #20
 800101e:	f000 f9db 	bl	80013d8 <HAL_Delay>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <DHT_receive_DHT21>:
//###############################################################################################################

static bool DHT_receive_DHT21(DHT_t *dht, uint32_t startTime, float *Temperature, float *Humidity) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  while(1)
  {
    if(HAL_GetTick() - startTime > 8)
 800103a:	f000 f9c3 	bl	80013c4 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b08      	cmp	r3, #8
 8001046:	d856      	bhi.n	80010f6 <DHT_receive_DHT21+0xca>
      goto ERROR;
    if(HAL_GetTick() - dht->time > 1)
 8001048:	f000 f9bc 	bl	80013c4 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d9f0      	bls.n	800103a <DHT_receive_DHT21+0xe>
    {
      uint8_t data[5];
      if(DHT_decode(dht,data) == false)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff fefe 	bl	8000e60 <DHT_decode>
 8001064:	4603      	mov	r3, r0
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d144      	bne.n	80010fa <DHT_receive_DHT21+0xce>
        goto ERROR;
      if(((data[0] + data[1] + data[2] + data[3]) & 0x00FF) != data[4])
 8001070:	7c3b      	ldrb	r3, [r7, #16]
 8001072:	461a      	mov	r2, r3
 8001074:	7c7b      	ldrb	r3, [r7, #17]
 8001076:	4413      	add	r3, r2
 8001078:	7cba      	ldrb	r2, [r7, #18]
 800107a:	4413      	add	r3, r2
 800107c:	7cfa      	ldrb	r2, [r7, #19]
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	7d3a      	ldrb	r2, [r7, #20]
 8001084:	4293      	cmp	r3, r2
 8001086:	d13a      	bne.n	80010fe <DHT_receive_DHT21+0xd2>
        goto ERROR;
      dht->temperature = (float)(data[2]*256 + data[3]) / 10.0f;
 8001088:	7cbb      	ldrb	r3, [r7, #18]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	7cfa      	ldrb	r2, [r7, #19]
 800108e:	4413      	add	r3, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f91d 	bl	80002d0 <__aeabi_i2f>
 8001096:	4603      	mov	r3, r0
 8001098:	491f      	ldr	r1, [pc, #124]	; (8001118 <DHT_receive_DHT21+0xec>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa20 	bl	80004e0 <__aeabi_fdiv>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	66da      	str	r2, [r3, #108]	; 0x6c
      if(Temperature != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <DHT_receive_DHT21+0x8a>
        *Temperature = dht->temperature;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
      dht->humidity = (float)(data[0]*256 + data[1]) / 10.0f;
 80010b6:	7c3b      	ldrb	r3, [r7, #16]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	7c7a      	ldrb	r2, [r7, #17]
 80010bc:	4413      	add	r3, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f906 	bl	80002d0 <__aeabi_i2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4914      	ldr	r1, [pc, #80]	; (8001118 <DHT_receive_DHT21+0xec>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa09 	bl	80004e0 <__aeabi_fdiv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	671a      	str	r2, [r3, #112]	; 0x70
      if(Humidity != NULL)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <DHT_receive_DHT21+0xb8>
        *Humidity = dht->humidity;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	601a      	str	r2, [r3, #0]
      dht->dataValid = true;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      DHT_output(dht);
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff fe5d 	bl	8000dac <DHT_output>
      return true;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00c      	b.n	8001110 <DHT_receive_DHT21+0xe4>
      goto ERROR;
 80010f6:	bf00      	nop
 80010f8:	e002      	b.n	8001100 <DHT_receive_DHT21+0xd4>
        goto ERROR;
 80010fa:	bf00      	nop
 80010fc:	e000      	b.n	8001100 <DHT_receive_DHT21+0xd4>
        goto ERROR;
 80010fe:	bf00      	nop
    }
  }
  ERROR:
  dht->dataValid = false;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  DHT_output(dht);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fe4f 	bl	8000dac <DHT_output>
  return false;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	41200000 	.word	0x41200000

0800111c <DHT_receive_DHT11>:

static bool DHT_receive_DHT11(DHT_t *dht, uint32_t startTime, float *Temperature, float *Humidity) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
  while(1)
  {
    if(HAL_GetTick() - startTime > 8)
 800112a:	f000 f94b 	bl	80013c4 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b08      	cmp	r3, #8
 8001136:	d85c      	bhi.n	80011f2 <DHT_receive_DHT11+0xd6>
      goto ERROR;
    if(HAL_GetTick() - dht->time > 1)
 8001138:	f000 f944 	bl	80013c4 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d9f0      	bls.n	800112a <DHT_receive_DHT11+0xe>
    {
      uint8_t data[5];
      if(DHT_decode(dht,data) == false)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fe86 	bl	8000e60 <DHT_decode>
 8001154:	4603      	mov	r3, r0
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d14a      	bne.n	80011f6 <DHT_receive_DHT11+0xda>
        goto ERROR;
      if(((data[0] + data[1] + data[2] + data[3]) & 0x00FF) != data[4])
 8001160:	7c3b      	ldrb	r3, [r7, #16]
 8001162:	461a      	mov	r2, r3
 8001164:	7c7b      	ldrb	r3, [r7, #17]
 8001166:	4413      	add	r3, r2
 8001168:	7cba      	ldrb	r2, [r7, #18]
 800116a:	4413      	add	r3, r2
 800116c:	7cfa      	ldrb	r2, [r7, #19]
 800116e:	4413      	add	r3, r2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	7d3a      	ldrb	r2, [r7, #20]
 8001174:	4293      	cmp	r3, r2
 8001176:	d140      	bne.n	80011fa <DHT_receive_DHT11+0xde>
        goto ERROR;
      dht->temperature = (float)(data[2]*100 + data[3]) / 100.0f;
 8001178:	7cbb      	ldrb	r3, [r7, #18]
 800117a:	461a      	mov	r2, r3
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	7cfa      	ldrb	r2, [r7, #19]
 8001184:	4413      	add	r3, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f8a2 	bl	80002d0 <__aeabi_i2f>
 800118c:	4603      	mov	r3, r0
 800118e:	4921      	ldr	r1, [pc, #132]	; (8001214 <DHT_receive_DHT11+0xf8>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9a5 	bl	80004e0 <__aeabi_fdiv>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	66da      	str	r2, [r3, #108]	; 0x6c
      if(Temperature != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <DHT_receive_DHT11+0x90>
        *Temperature = dht->temperature;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	601a      	str	r2, [r3, #0]
      dht->humidity = (float)(data[0]*100 + data[1]) / 100.0f;
 80011ac:	7c3b      	ldrb	r3, [r7, #16]
 80011ae:	461a      	mov	r2, r3
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	7c7a      	ldrb	r2, [r7, #17]
 80011b8:	4413      	add	r3, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f888 	bl	80002d0 <__aeabi_i2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4914      	ldr	r1, [pc, #80]	; (8001214 <DHT_receive_DHT11+0xf8>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f98b 	bl	80004e0 <__aeabi_fdiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	671a      	str	r2, [r3, #112]	; 0x70
      if(Humidity != NULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <DHT_receive_DHT11+0xc4>
        *Humidity = dht->humidity;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	601a      	str	r2, [r3, #0]
      dht->dataValid = true;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      DHT_output(dht);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff fddf 	bl	8000dac <DHT_output>
      return true;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00c      	b.n	800120c <DHT_receive_DHT11+0xf0>
      goto ERROR;
 80011f2:	bf00      	nop
 80011f4:	e002      	b.n	80011fc <DHT_receive_DHT11+0xe0>
        goto ERROR;
 80011f6:	bf00      	nop
 80011f8:	e000      	b.n	80011fc <DHT_receive_DHT11+0xe0>
        goto ERROR;
 80011fa:	bf00      	nop
    }
  }
  ERROR:
  dht->dataValid = false;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  DHT_output(dht);
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff fdd1 	bl	8000dac <DHT_output>
  return false;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	42c80000 	.word	0x42c80000

08001218 <DHT_readData>:


bool  DHT_readData(DHT_t *dht, float *Temperature, float *Humidity)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t  startTime;
  switch(dht->type)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	7a9b      	ldrb	r3, [r3, #10]
 8001228:	2b05      	cmp	r3, #5
 800122a:	dc65      	bgt.n	80012f8 <DHT_readData+0xe0>
 800122c:	2b04      	cmp	r3, #4
 800122e:	da2a      	bge.n	8001286 <DHT_readData+0x6e>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <DHT_readData+0x22>
 8001234:	2b02      	cmp	r3, #2
 8001236:	d026      	beq.n	8001286 <DHT_readData+0x6e>
      startTime = HAL_GetTick();
      DHT_input(dht);
      return DHT_receive_DHT21(dht, startTime, Temperature, Humidity);

      default:
      break;    
 8001238:	e05e      	b.n	80012f8 <DHT_readData+0xe0>
      DHT_output(dht);
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fdb6 	bl	8000dac <DHT_output>
      DHT_output_low(dht);
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fdd1 	bl	8000de8 <DHT_output_low>
      DHT_delayMs(18);
 8001246:	2012      	movs	r0, #18
 8001248:	f000 f8c6 	bl	80013d8 <HAL_Delay>
      DHT_output_high(dht);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fddb 	bl	8000e08 <DHT_output_high>
      dht->cnt = 0;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      dht->lastCNT = 0;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	669a      	str	r2, [r3, #104]	; 0x68
      dht->tim->Instance->CNT = 0;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
      startTime = HAL_GetTick();
 800126a:	f000 f8ab 	bl	80013c4 <HAL_GetTick>
 800126e:	6178      	str	r0, [r7, #20]
      DHT_input(dht);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff fdd9 	bl	8000e28 <DHT_input>
      return DHT_receive_DHT11(dht, startTime, Temperature, Humidity);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	6979      	ldr	r1, [r7, #20]
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff ff4d 	bl	800111c <DHT_receive_DHT11>
 8001282:	4603      	mov	r3, r0
 8001284:	e041      	b.n	800130a <DHT_readData+0xf2>
      DHT_output(dht);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fd90 	bl	8000dac <DHT_output>
      dht->gpio->BSRR = (dht->pin)<<16;    
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	611a      	str	r2, [r3, #16]
      DHT_delayMs(5);
 8001298:	2005      	movs	r0, #5
 800129a:	f000 f89d 	bl	80013d8 <HAL_Delay>
      dht->gpio->BSRR = dht->pin;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	891a      	ldrh	r2, [r3, #8]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	611a      	str	r2, [r3, #16]
      DHT_delayUs(dht,20);
 80012a8:	2114      	movs	r1, #20
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fd65 	bl	8000d7a <DHT_delayUs>
      dht->gpio->BSRR = (dht->pin)<<16;    
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	611a      	str	r2, [r3, #16]
      DHT_delayUs(dht,5);
 80012bc:	2105      	movs	r1, #5
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fd5b 	bl	8000d7a <DHT_delayUs>
      dht->cnt = 0;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      dht->lastCNT = 0;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	669a      	str	r2, [r3, #104]	; 0x68
      dht->tim->Instance->CNT = 0;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
      startTime = HAL_GetTick();
 80012dc:	f000 f872 	bl	80013c4 <HAL_GetTick>
 80012e0:	6178      	str	r0, [r7, #20]
      DHT_input(dht);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff fda0 	bl	8000e28 <DHT_input>
      return DHT_receive_DHT21(dht, startTime, Temperature, Humidity);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	6979      	ldr	r1, [r7, #20]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff fe9c 	bl	800102c <DHT_receive_DHT21>
 80012f4:	4603      	mov	r3, r0
 80012f6:	e008      	b.n	800130a <DHT_readData+0xf2>
      break;    
 80012f8:	bf00      	nop
  }

  //ERROR
  dht->dataValid = false;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  DHT_output(dht);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fd52 	bl	8000dac <DHT_output>
  return false;    
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_Init+0x28>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_Init+0x28>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 fa43 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	200f      	movs	r0, #15
 800132c:	f000 f808 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001330:	f7ff fbc8 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x54>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x58>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fa5b 	bl	800181a <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f000 fa23 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_InitTick+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	20000008 	.word	0x20000008
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x1c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x20>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <HAL_IncTick+0x20>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000184 	.word	0x20000184

080013c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <HAL_GetTick+0x10>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000184 	.word	0x20000184

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff fff0 	bl	80013c4 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffe0 	bl	80013c4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008

08001420 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0ed      	b.n	800160e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fb72 	bl	8000b28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001454:	f7ff ffb6 	bl	80013c4 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145a:	e012      	b.n	8001482 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800145c:	f7ff ffb2 	bl	80013c4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d90b      	bls.n	8001482 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2205      	movs	r2, #5
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0c5      	b.n	800160e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0e5      	beq.n	800145c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0202 	bic.w	r2, r2, #2
 800149e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a0:	f7ff ff90 	bl	80013c4 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a6:	e012      	b.n	80014ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014a8:	f7ff ff8c 	bl	80013c4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b0a      	cmp	r3, #10
 80014b4:	d90b      	bls.n	80014ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2205      	movs	r2, #5
 80014c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e09f      	b.n	800160e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e5      	bne.n	80014a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e007      	b.n	8001506 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7e5b      	ldrb	r3, [r3, #25]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e007      	b.n	8001530 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800152e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7e9b      	ldrb	r3, [r3, #26]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d108      	bne.n	800154a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e007      	b.n	800155a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0220 	bic.w	r2, r2, #32
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7edb      	ldrb	r3, [r3, #27]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d108      	bne.n	8001574 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0210 	bic.w	r2, r2, #16
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e007      	b.n	8001584 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0210 	orr.w	r2, r2, #16
 8001582:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7f1b      	ldrb	r3, [r3, #28]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d108      	bne.n	800159e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0208 	orr.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e007      	b.n	80015ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0208 	bic.w	r2, r2, #8
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7f5b      	ldrb	r3, [r3, #29]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0204 	orr.w	r2, r2, #4
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0204 	bic.w	r2, r2, #4
 80015d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	ea42 0103 	orr.w	r1, r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <__NVIC_EnableIRQ+0x34>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff90 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff2d 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff42 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff90 	bl	8001708 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5f 	bl	80016b4 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff35 	bl	800167c <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e169      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8158 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a90      	ldr	r2, [pc, #576]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b1 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1e0>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4928      	ldr	r1, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x2e2>
 8001ad2:	bf00      	nop
 8001ad4:	10320000 	.word	0x10320000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae8e 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fd72 	bl	80006a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e272      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d10b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d168      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e24c      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x76>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xbc>
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb8c 	bl	80013c4 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb88 	bl	80013c4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e200      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe4>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fb78 	bl	80013c4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fb74 	bl	80013c4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1ec      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x10c>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb2d 	bl	80013c4 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fb29 	bl	80013c4 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb0c 	bl	80013c4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb08 	bl	80013c4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e180      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff faec 	bl	80013c4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fae8 	bl	80013c4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e160      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 fa9c 	bl	800234c <RCC_Delay>
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fad2 	bl	80013c4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff face 	bl	80013c4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d908      	bls.n	8001e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e146      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	42420000 	.word	0x42420000
 8001e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a6 	beq.w	8001faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a87      	ldr	r2, [pc, #540]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7e      	ldr	r2, [pc, #504]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fa8f 	bl	80013c4 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff fa8b 	bl	80013c4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e103      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x312>
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a6e      	ldr	r2, [pc, #440]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001ee6:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x356>
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a60      	ldr	r2, [pc, #384]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fa3f 	bl	80013c4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fa3b 	bl	80013c4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0b1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fa29 	bl	80013c4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fa25 	bl	80013c4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e09b      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d146      	bne.n	8002056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff f9f9 	bl	80013c4 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff f9f5 	bl	80013c4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e06d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4921      	ldr	r1, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a19      	ldr	r1, [r3, #32]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	491b      	ldr	r1, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff f9c9 	bl	80013c4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff f9c5 	bl	80013c4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x46a>
 8002054:	e035      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f9b2 	bl	80013c4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f9ae 	bl	80013c4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e026      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x498>
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e019      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x500>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d040      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06b      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4936      	ldr	r1, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff f900 	bl	80013c4 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff f8fc 	bl	80013c4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e053      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d210      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1cc>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f85e 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08003810 	.word	0x08003810
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x36>
 80022d2:	e027      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	613b      	str	r3, [r7, #16]
      break;
 80022d8:	e027      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0c5b      	lsrs	r3, r3, #17
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002306:	fb03 f202 	mul.w	r2, r3, r2
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e004      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	693b      	ldr	r3, [r7, #16]
}
 800232c:	4618      	mov	r0, r3
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	08003820 	.word	0x08003820
 8002344:	08003830 	.word	0x08003830
 8002348:	003d0900 	.word	0x003d0900

0800234c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <RCC_Delay+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <RCC_Delay+0x38>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002368:	bf00      	nop
  }
  while (Delay --);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f9      	bne.n	8002368 <RCC_Delay+0x1c>
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000000 	.word	0x20000000
 8002384:	10624dd3 	.word	0x10624dd3

08002388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e041      	b.n	800241e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fc06 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f000 f940 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d001      	beq.n	8002440 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIM_Base_Start+0x88>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_TIM_Base_Start+0x48>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d009      	beq.n	8002470 <HAL_TIM_Base_Start+0x48>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Base_Start+0x8c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_TIM_Base_Start+0x48>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_TIM_Base_Start+0x90>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d010      	beq.n	80024a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002492:	e007      	b.n	80024a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800

080024bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_TIM_ConfigClockSource+0x1c>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0b4      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x186>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002510:	d03e      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0xd4>
 8002512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002516:	f200 8087 	bhi.w	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	f000 8086 	beq.w	800262e <HAL_TIM_ConfigClockSource+0x172>
 8002522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002526:	d87f      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d01a      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0xa6>
 800252c:	2b70      	cmp	r3, #112	; 0x70
 800252e:	d87b      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b60      	cmp	r3, #96	; 0x60
 8002532:	d050      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002534:	2b60      	cmp	r3, #96	; 0x60
 8002536:	d877      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b50      	cmp	r3, #80	; 0x50
 800253a:	d03c      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xfa>
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d873      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d058      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d86f      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b30      	cmp	r3, #48	; 0x30
 800254a:	d064      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 800254c:	2b30      	cmp	r3, #48	; 0x30
 800254e:	d86b      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d060      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	2b20      	cmp	r3, #32
 8002556:	d867      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05c      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	2b10      	cmp	r3, #16
 800255e:	d05a      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x15a>
 8002560:	e062      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002572:	f000 f944 	bl	80027fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	609a      	str	r2, [r3, #8]
      break;
 800258e:	e04f      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025a0:	f000 f92d 	bl	80027fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b2:	609a      	str	r2, [r3, #8]
      break;
 80025b4:	e03c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	461a      	mov	r2, r3
 80025c4:	f000 f8a4 	bl	8002710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2150      	movs	r1, #80	; 0x50
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8fb 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025d4:	e02c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e2:	461a      	mov	r2, r3
 80025e4:	f000 f8c2 	bl	800276c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2160      	movs	r1, #96	; 0x60
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8eb 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025f4:	e01c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002602:	461a      	mov	r2, r3
 8002604:	f000 f884 	bl	8002710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f8db 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 8002614:	e00c      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f000 f8d2 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 8002626:	e003      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e000      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800262e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a26      	ldr	r2, [pc, #152]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <TIM_Base_SetConfig+0xc0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <TIM_Base_SetConfig+0xc0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800

08002710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0201 	bic.w	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 030a 	bic.w	r3, r3, #10
 800274c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0210 	bic.w	r2, r3, #16
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f043 0307 	orr.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002818:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	431a      	orrs	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002850:	2302      	movs	r3, #2
 8002852:	e046      	b.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d009      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10c      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800

080028f8 <tm1637_delay_us>:
const uint8_t fill_off[4] = {0x00, 0x00, 0x00, 0x00};
const uint8_t _tm1637_minus = 0x40;
const uint8_t _tm1637_dot = 0x80;  
//#######################################################################################################################
void tm1637_delay_us(uint8_t delay)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  while (delay > 0)
 8002902:	e00c      	b.n	800291e <tm1637_delay_us+0x26>
  {
    delay--;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	3b01      	subs	r3, #1
 8002908:	71fb      	strb	r3, [r7, #7]
    //__nop();__nop();__nop();__nop();
    for (int i = 0; i < 4; i++) {
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e003      	b.n	8002918 <tm1637_delay_us+0x20>
    	__asm__ __volatile__("nop\n\t":::"memory");
 8002910:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3301      	adds	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b03      	cmp	r3, #3
 800291c:	ddf8      	ble.n	8002910 <tm1637_delay_us+0x18>
  while (delay > 0)
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ef      	bne.n	8002904 <tm1637_delay_us+0xc>
    }
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <tm1637_start>:
//#######################################################################################################################
void tm1637_start(tm1637_t *tm1637)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6898      	ldr	r0, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	89db      	ldrh	r3, [r3, #14]
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	f7ff f911 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002948:	2014      	movs	r0, #20
 800294a:	f7ff ffd5 	bl	80028f8 <tm1637_delay_us>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <tm1637_stop>:
//#######################################################################################################################
void tm1637_stop(tm1637_t *tm1637)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6898      	ldr	r0, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	89db      	ldrh	r3, [r3, #14]
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	f7ff f8fe 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800296e:	2014      	movs	r0, #20
 8002970:	f7ff ffc2 	bl	80028f8 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6858      	ldr	r0, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	899b      	ldrh	r3, [r3, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	4619      	mov	r1, r3
 8002980:	f7ff f8f3 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002984:	2014      	movs	r0, #20
 8002986:	f7ff ffb7 	bl	80028f8 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6898      	ldr	r0, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	89db      	ldrh	r3, [r3, #14]
 8002992:	2201      	movs	r2, #1
 8002994:	4619      	mov	r1, r3
 8002996:	f7ff f8e8 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800299a:	2014      	movs	r0, #20
 800299c:	f7ff ffac 	bl	80028f8 <tm1637_delay_us>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <tm1637_write_byte>:
//#######################################################################################################################
uint8_t tm1637_write_byte(tm1637_t *tm1637, uint8_t data)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
  //  write 8 bit data
  for (uint8_t i = 0; i < 8; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e034      	b.n	8002a24 <tm1637_write_byte+0x7c>
  {
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6858      	ldr	r0, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	899b      	ldrh	r3, [r3, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7ff f8d0 	bl	8001b6a <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 80029ca:	2014      	movs	r0, #20
 80029cc:	f7ff ff94 	bl	80028f8 <tm1637_delay_us>
    if (data & 0x01)
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <tm1637_write_byte+0x44>
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6898      	ldr	r0, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	89db      	ldrh	r3, [r3, #14]
 80029e2:	2201      	movs	r2, #1
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7ff f8c0 	bl	8001b6a <HAL_GPIO_WritePin>
 80029ea:	e007      	b.n	80029fc <tm1637_write_byte+0x54>
    else
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6898      	ldr	r0, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	89db      	ldrh	r3, [r3, #14]
 80029f4:	2200      	movs	r2, #0
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7ff f8b7 	bl	8001b6a <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 80029fc:	2014      	movs	r0, #20
 80029fe:	f7ff ff7b 	bl	80028f8 <tm1637_delay_us>
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6858      	ldr	r0, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	899b      	ldrh	r3, [r3, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f7ff f8ac 	bl	8001b6a <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 8002a12:	2014      	movs	r0, #20
 8002a14:	f7ff ff70 	bl	80028f8 <tm1637_delay_us>
    data = data >> 1;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < 8; i++)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d9c7      	bls.n	80029ba <tm1637_write_byte+0x12>
  }
  // wait for acknowledge
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6858      	ldr	r0, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	899b      	ldrh	r3, [r3, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7ff f898 	bl	8001b6a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6898      	ldr	r0, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	89db      	ldrh	r3, [r3, #14]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7ff f890 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002a4a:	2014      	movs	r0, #20
 8002a4c:	f7ff ff54 	bl	80028f8 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6858      	ldr	r0, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	899b      	ldrh	r3, [r3, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7ff f885 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002a60:	2014      	movs	r0, #20
 8002a62:	f7ff ff49 	bl	80028f8 <tm1637_delay_us>
  uint8_t ack = HAL_GPIO_ReadPin(tm1637->gpio_dat, tm1637->pin_dat);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	89db      	ldrh	r3, [r3, #14]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7ff f863 	bl	8001b3c <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73bb      	strb	r3, [r7, #14]
  if (ack == 0)
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <tm1637_write_byte+0xe8>
    HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6898      	ldr	r0, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	89db      	ldrh	r3, [r3, #14]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7ff f86d 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002a90:	2014      	movs	r0, #20
 8002a92:	f7ff ff31 	bl	80028f8 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6858      	ldr	r0, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	899b      	ldrh	r3, [r3, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7ff f862 	bl	8001b6a <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002aa6:	2014      	movs	r0, #20
 8002aa8:	f7ff ff26 	bl	80028f8 <tm1637_delay_us>
  return ack;
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <tm1637_lock>:
//#######################################################################################################################
void tm1637_lock(tm1637_t *tm1637)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  while (tm1637->lock == 1)
 8002abe:	e002      	b.n	8002ac6 <tm1637_lock+0x10>
    tm1637_delay_ms(1);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7fe fc89 	bl	80013d8 <HAL_Delay>
  while (tm1637->lock == 1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d0f8      	beq.n	8002ac0 <tm1637_lock+0xa>
  tm1637->lock = 1;  
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <tm1637_unlock>:
//#######################################################################################################################
void tm1637_unlock(tm1637_t *tm1637)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  tm1637->lock = 0;  
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <tm1637_init>:
//#######################################################################################################################
void tm1637_init(tm1637_t *tm1637, GPIO_TypeDef *gpio_clk, uint16_t pin_clk, GPIO_TypeDef *gpio_dat, uint16_t pin_dat)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80fb      	strh	r3, [r7, #6]
  memset(tm1637, 0, sizeof(tm1637_t)); 
 8002b04:	2210      	movs	r2, #16
 8002b06:	2100      	movs	r1, #0
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f9dd 	bl	8002ec8 <memset>
  //  set max brightess
  tm1637_brightness(tm1637, 7);  
 8002b0e:	2107      	movs	r1, #7
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f833 	bl	8002b7c <tm1637_brightness>
  tm1637_lock(tm1637);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff ffcd 	bl	8002ab6 <tm1637_lock>
  //  init gpio
  tm1637->gpio_clk = gpio_clk;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	605a      	str	r2, [r3, #4]
  tm1637->pin_clk = pin_clk;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	819a      	strh	r2, [r3, #12]
  tm1637->gpio_dat = gpio_dat;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	609a      	str	r2, [r3, #8]
  tm1637->pin_dat = pin_dat;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b32:	81da      	strh	r2, [r3, #14]
  GPIO_InitTypeDef g = {0};
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
  g.Mode = GPIO_MODE_OUTPUT_OD;
 8002b42:	2311      	movs	r3, #17
 8002b44:	617b      	str	r3, [r7, #20]
  g.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  g.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	61fb      	str	r3, [r7, #28]
  g.Pin = pin_clk;
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(gpio_clk, &g);
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4619      	mov	r1, r3
 8002b58:	68b8      	ldr	r0, [r7, #8]
 8002b5a:	f7fe fe6b 	bl	8001834 <HAL_GPIO_Init>
  g.Pin = pin_dat;
 8002b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(gpio_dat, &g);    
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4619      	mov	r1, r3
 8002b68:	6838      	ldr	r0, [r7, #0]
 8002b6a:	f7fe fe63 	bl	8001834 <HAL_GPIO_Init>
  tm1637_unlock(tm1637);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ffb4 	bl	8002adc <tm1637_unlock>
}
 8002b74:	bf00      	nop
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <tm1637_brightness>:
//#######################################################################################################################
void tm1637_brightness(tm1637_t *tm1637, uint8_t brightness_0_to_7)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  tm1637_lock(tm1637);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff94 	bl	8002ab6 <tm1637_lock>
  tm1637->brightness = (brightness_0_to_7 & 0x7) | 0x08;
 8002b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	b25b      	sxtb	r3, r3
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	705a      	strb	r2, [r3, #1]
  tm1637_unlock(tm1637);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff99 	bl	8002adc <tm1637_unlock>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <tm1637_write_raw>:
//#######################################################################################################################
void tm1637_write_raw(tm1637_t *tm1637, const uint8_t *raw, uint8_t length, uint8_t pos)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	71fb      	strb	r3, [r7, #7]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	71bb      	strb	r3, [r7, #6]
  if (pos > 5)
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d83f      	bhi.n	8002c4e <tm1637_write_raw+0x9c>
    return;
  if (length > 6)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d901      	bls.n	8002bd8 <tm1637_write_raw+0x26>
    length = 6;
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	71fb      	strb	r3, [r7, #7]
  // write COMM1
  tm1637_start(tm1637);
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fea9 	bl	8002930 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM1);
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7ff fee1 	bl	80029a8 <tm1637_write_byte>
  tm1637_stop(tm1637);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff feb5 	bl	8002956 <tm1637_stop>
  // write COMM2 + first digit address
  tm1637_start(tm1637);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff fe9f 	bl	8002930 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM2 + (pos & 0x03));
 8002bf2:	79bb      	ldrb	r3, [r7, #6]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3b40      	subs	r3, #64	; 0x40
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff fed1 	bl	80029a8 <tm1637_write_byte>
  // write the data bytes
  for (uint8_t k=0; k < length; k++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]
 8002c0a:	e00a      	b.n	8002c22 <tm1637_write_raw+0x70>
    tm1637_write_byte(tm1637, raw[k]);
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fec6 	bl	80029a8 <tm1637_write_byte>
  for (uint8_t k=0; k < length; k++)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
 8002c22:	7dfa      	ldrb	r2, [r7, #23]
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d3f0      	bcc.n	8002c0c <tm1637_write_raw+0x5a>
  tm1637_stop(tm1637);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fe93 	bl	8002956 <tm1637_stop>
  // write COMM3 + brightness
  tm1637_start(tm1637);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff fe7d 	bl	8002930 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM3 + tm1637->brightness);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	785b      	ldrb	r3, [r3, #1]
 8002c3a:	3b80      	subs	r3, #128	; 0x80
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4619      	mov	r1, r3
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff feb1 	bl	80029a8 <tm1637_write_byte>
  tm1637_stop(tm1637);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff fe85 	bl	8002956 <tm1637_stop>
 8002c4c:	e000      	b.n	8002c50 <tm1637_write_raw+0x9e>
    return;
 8002c4e:	bf00      	nop
}
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <tm1637_write_fractional>:
  tm1637_write_raw(tm1637, buffer, 6, pos);              
  tm1637_unlock(tm1637);  
}

void tm1637_write_fractional(tm1637_t *tm1637, float digit, uint8_t floating_digit, uint8_t pos)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08d      	sub	sp, #52	; 0x34
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	460b      	mov	r3, r1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	71bb      	strb	r3, [r7, #6]
  tm1637_lock(tm1637);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff ff21 	bl	8002ab6 <tm1637_lock>
  char str[8];
  uint8_t buffer[6] = {0};
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	82bb      	strh	r3, [r7, #20]
  const int16_t digit_int = digit;
 8002c7c:	68b8      	ldr	r0, [r7, #8]
 8002c7e:	f7fd fccb 	bl	8000618 <__aeabi_f2iz>
 8002c82:	4603      	mov	r3, r0
 8002c84:	847b      	strh	r3, [r7, #34]	; 0x22
  const uint16_t digit_fract = (digit - digit_int) * 10 * floating_digit;
 8002c86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fb20 	bl	80002d0 <__aeabi_i2f>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4619      	mov	r1, r3
 8002c94:	68b8      	ldr	r0, [r7, #8]
 8002c96:	f7fd fa65 	bl	8000164 <__aeabi_fsub>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4966      	ldr	r1, [pc, #408]	; (8002e38 <tm1637_write_fractional+0x1e0>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fb6a 	bl	8000378 <__aeabi_fmul>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461c      	mov	r4, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fb10 	bl	80002d0 <__aeabi_i2f>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7fd fb5f 	bl	8000378 <__aeabi_fmul>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fcd1 	bl	8000664 <__aeabi_f2uiz>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	843b      	strh	r3, [r7, #32]
  snprintf(str, sizeof(str) , "%"PRId16".%"PRIu16, digit_int, digit_fract);
 8002cc6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002cca:	8c3b      	ldrh	r3, [r7, #32]
 8002ccc:	f107 0018 	add.w	r0, r7, #24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	4a59      	ldr	r2, [pc, #356]	; (8002e3c <tm1637_write_fractional+0x1e4>)
 8002cd6:	2108      	movs	r1, #8
 8002cd8:	f000 f8c2 	bl	8002e60 <sniprintf>
  if (tm1637->show_zero == false)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	789b      	ldrb	r3, [r3, #2]
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d027      	beq.n	8002d3a <tm1637_write_fractional+0xe2>
  {
    for (int8_t i = strlen(str) - 1; i > 0; i--)
 8002cea:	f107 0318 	add.w	r3, r7, #24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fa2c 	bl	800014c <strlen>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d00:	e015      	b.n	8002d2e <tm1637_write_fractional+0xd6>
    {
      if (str[i] == '0')
 8002d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d06:	3328      	adds	r3, #40	; 0x28
 8002d08:	443b      	add	r3, r7
 8002d0a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d0e:	2b30      	cmp	r3, #48	; 0x30
 8002d10:	d112      	bne.n	8002d38 <tm1637_write_fractional+0xe0>
        str[i] = 0;
 8002d12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d16:	3328      	adds	r3, #40	; 0x28
 8002d18:	443b      	add	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int8_t i = strlen(str) - 1; i > 0; i--)
 8002d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	dce5      	bgt.n	8002d02 <tm1637_write_fractional+0xaa>
 8002d36:	e000      	b.n	8002d3a <tm1637_write_fractional+0xe2>
      else
        break;
 8002d38:	bf00      	nop
    }
  }
  uint8_t index = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for (uint8_t i=0; i < 7; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002d46:	e065      	b.n	8002e14 <tm1637_write_fractional+0x1bc>
  {
    if (str[i] == '-')
 8002d48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d4c:	3328      	adds	r3, #40	; 0x28
 8002d4e:	443b      	add	r3, r7
 8002d50:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d54:	2b2d      	cmp	r3, #45	; 0x2d
 8002d56:	d10c      	bne.n	8002d72 <tm1637_write_fractional+0x11a>
    {
      buffer[index] = _tm1637_minus;
 8002d58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d5c:	2240      	movs	r2, #64	; 0x40
 8002d5e:	3328      	adds	r3, #40	; 0x28
 8002d60:	443b      	add	r3, r7
 8002d62:	f803 2c18 	strb.w	r2, [r3, #-24]
      index++;
 8002d66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d70:	e04b      	b.n	8002e0a <tm1637_write_fractional+0x1b2>
    }
    else if((str[i] >= '0') && (str[i] <= '9'))
 8002d72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d76:	3328      	adds	r3, #40	; 0x28
 8002d78:	443b      	add	r3, r7
 8002d7a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8002d80:	d91d      	bls.n	8002dbe <tm1637_write_fractional+0x166>
 8002d82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d86:	3328      	adds	r3, #40	; 0x28
 8002d88:	443b      	add	r3, r7
 8002d8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d8e:	2b39      	cmp	r3, #57	; 0x39
 8002d90:	d815      	bhi.n	8002dbe <tm1637_write_fractional+0x166>
    {
      buffer[index] = _tm1637_digit[str[i] - 48];
 8002d92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d96:	3328      	adds	r3, #40	; 0x28
 8002d98:	443b      	add	r3, r7
 8002d9a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002da2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002da6:	4926      	ldr	r1, [pc, #152]	; (8002e40 <tm1637_write_fractional+0x1e8>)
 8002da8:	5c8a      	ldrb	r2, [r1, r2]
 8002daa:	3328      	adds	r3, #40	; 0x28
 8002dac:	443b      	add	r3, r7
 8002dae:	f803 2c18 	strb.w	r2, [r3, #-24]
      index++;
 8002db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002db6:	3301      	adds	r3, #1
 8002db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002dbc:	e025      	b.n	8002e0a <tm1637_write_fractional+0x1b2>
    }
    else if (str[i] == '.')
 8002dbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dc2:	3328      	adds	r3, #40	; 0x28
 8002dc4:	443b      	add	r3, r7
 8002dc6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002dca:	2b2e      	cmp	r3, #46	; 0x2e
 8002dcc:	d115      	bne.n	8002dfa <tm1637_write_fractional+0x1a2>
    {
      if (index > 0)
 8002dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d019      	beq.n	8002e0a <tm1637_write_fractional+0x1b2>
        buffer[index - 1] |= _tm1637_dot;
 8002dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	3328      	adds	r3, #40	; 0x28
 8002dde:	443b      	add	r3, r7
 8002de0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dea:	3b01      	subs	r3, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	3328      	adds	r3, #40	; 0x28
 8002df2:	443b      	add	r3, r7
 8002df4:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002df8:	e007      	b.n	8002e0a <tm1637_write_fractional+0x1b2>
    }
    else
    {
      buffer[index] = 0;
 8002dfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dfe:	3328      	adds	r3, #40	; 0x28
 8002e00:	443b      	add	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	f803 2c18 	strb.w	r2, [r3, #-24]
      break;
 8002e08:	e008      	b.n	8002e1c <tm1637_write_fractional+0x1c4>
  for (uint8_t i=0; i < 7; i++)
 8002e0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002e14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d995      	bls.n	8002d48 <tm1637_write_fractional+0xf0>
    }
  }
  tm1637_write_raw(tm1637, buffer, 6, pos);
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	f107 0110 	add.w	r1, r7, #16
 8002e22:	2206      	movs	r2, #6
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fec4 	bl	8002bb2 <tm1637_write_raw>
  tm1637_unlock(tm1637);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff fe56 	bl	8002adc <tm1637_unlock>
}
 8002e30:	bf00      	nop
 8002e32:	372c      	adds	r7, #44	; 0x2c
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd90      	pop	{r4, r7, pc}
 8002e38:	41200000 	.word	0x41200000
 8002e3c:	08003808 	.word	0x08003808
 8002e40:	08003834 	.word	0x08003834

08002e44 <tm1637_show_zero>:
}
#endif

//#######################################################################################################################
void tm1637_show_zero(tm1637_t *tm1637, bool enable)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
  tm1637->show_zero = enable;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	709a      	strb	r2, [r3, #2]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <sniprintf>:
 8002e60:	b40c      	push	{r2, r3}
 8002e62:	b530      	push	{r4, r5, lr}
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <sniprintf+0x64>)
 8002e66:	1e0c      	subs	r4, r1, #0
 8002e68:	681d      	ldr	r5, [r3, #0]
 8002e6a:	b09d      	sub	sp, #116	; 0x74
 8002e6c:	da08      	bge.n	8002e80 <sniprintf+0x20>
 8002e6e:	238b      	movs	r3, #139	; 0x8b
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	602b      	str	r3, [r5, #0]
 8002e76:	b01d      	add	sp, #116	; 0x74
 8002e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e7c:	b002      	add	sp, #8
 8002e7e:	4770      	bx	lr
 8002e80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002e84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e88:	bf0c      	ite	eq
 8002e8a:	4623      	moveq	r3, r4
 8002e8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e90:	9304      	str	r3, [sp, #16]
 8002e92:	9307      	str	r3, [sp, #28]
 8002e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e98:	9002      	str	r0, [sp, #8]
 8002e9a:	9006      	str	r0, [sp, #24]
 8002e9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	ab21      	add	r3, sp, #132	; 0x84
 8002ea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002ea6:	a902      	add	r1, sp, #8
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	f000 f98f 	bl	80031cc <_svfiprintf_r>
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	bfbc      	itt	lt
 8002eb2:	238b      	movlt	r3, #139	; 0x8b
 8002eb4:	602b      	strlt	r3, [r5, #0]
 8002eb6:	2c00      	cmp	r4, #0
 8002eb8:	d0dd      	beq.n	8002e76 <sniprintf+0x16>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	9b02      	ldr	r3, [sp, #8]
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e7d9      	b.n	8002e76 <sniprintf+0x16>
 8002ec2:	bf00      	nop
 8002ec4:	20000058 	.word	0x20000058

08002ec8 <memset>:
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4402      	add	r2, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <__errno>:
 8002ed8:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <__errno+0x8>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000058 	.word	0x20000058

08002ee4 <__libc_init_array>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	2600      	movs	r6, #0
 8002ee8:	4d0c      	ldr	r5, [pc, #48]	; (8002f1c <__libc_init_array+0x38>)
 8002eea:	4c0d      	ldr	r4, [pc, #52]	; (8002f20 <__libc_init_array+0x3c>)
 8002eec:	1b64      	subs	r4, r4, r5
 8002eee:	10a4      	asrs	r4, r4, #2
 8002ef0:	42a6      	cmp	r6, r4
 8002ef2:	d109      	bne.n	8002f08 <__libc_init_array+0x24>
 8002ef4:	f000 fc7a 	bl	80037ec <_init>
 8002ef8:	2600      	movs	r6, #0
 8002efa:	4d0a      	ldr	r5, [pc, #40]	; (8002f24 <__libc_init_array+0x40>)
 8002efc:	4c0a      	ldr	r4, [pc, #40]	; (8002f28 <__libc_init_array+0x44>)
 8002efe:	1b64      	subs	r4, r4, r5
 8002f00:	10a4      	asrs	r4, r4, #2
 8002f02:	42a6      	cmp	r6, r4
 8002f04:	d105      	bne.n	8002f12 <__libc_init_array+0x2e>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0c:	4798      	blx	r3
 8002f0e:	3601      	adds	r6, #1
 8002f10:	e7ee      	b.n	8002ef0 <__libc_init_array+0xc>
 8002f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f16:	4798      	blx	r3
 8002f18:	3601      	adds	r6, #1
 8002f1a:	e7f2      	b.n	8002f02 <__libc_init_array+0x1e>
 8002f1c:	08003874 	.word	0x08003874
 8002f20:	08003874 	.word	0x08003874
 8002f24:	08003874 	.word	0x08003874
 8002f28:	08003878 	.word	0x08003878

08002f2c <__retarget_lock_acquire_recursive>:
 8002f2c:	4770      	bx	lr

08002f2e <__retarget_lock_release_recursive>:
 8002f2e:	4770      	bx	lr

08002f30 <_free_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4605      	mov	r5, r0
 8002f34:	2900      	cmp	r1, #0
 8002f36:	d040      	beq.n	8002fba <_free_r+0x8a>
 8002f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f3c:	1f0c      	subs	r4, r1, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bfb8      	it	lt
 8002f42:	18e4      	addlt	r4, r4, r3
 8002f44:	f000 f8dc 	bl	8003100 <__malloc_lock>
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <_free_r+0x8c>)
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	b933      	cbnz	r3, 8002f5c <_free_r+0x2c>
 8002f4e:	6063      	str	r3, [r4, #4]
 8002f50:	6014      	str	r4, [r2, #0]
 8002f52:	4628      	mov	r0, r5
 8002f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f58:	f000 b8d8 	b.w	800310c <__malloc_unlock>
 8002f5c:	42a3      	cmp	r3, r4
 8002f5e:	d908      	bls.n	8002f72 <_free_r+0x42>
 8002f60:	6820      	ldr	r0, [r4, #0]
 8002f62:	1821      	adds	r1, r4, r0
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf01      	itttt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	1809      	addeq	r1, r1, r0
 8002f6e:	6021      	streq	r1, [r4, #0]
 8002f70:	e7ed      	b.n	8002f4e <_free_r+0x1e>
 8002f72:	461a      	mov	r2, r3
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b10b      	cbz	r3, 8002f7c <_free_r+0x4c>
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	d9fa      	bls.n	8002f72 <_free_r+0x42>
 8002f7c:	6811      	ldr	r1, [r2, #0]
 8002f7e:	1850      	adds	r0, r2, r1
 8002f80:	42a0      	cmp	r0, r4
 8002f82:	d10b      	bne.n	8002f9c <_free_r+0x6c>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	4401      	add	r1, r0
 8002f88:	1850      	adds	r0, r2, r1
 8002f8a:	4283      	cmp	r3, r0
 8002f8c:	6011      	str	r1, [r2, #0]
 8002f8e:	d1e0      	bne.n	8002f52 <_free_r+0x22>
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4408      	add	r0, r1
 8002f96:	6010      	str	r0, [r2, #0]
 8002f98:	6053      	str	r3, [r2, #4]
 8002f9a:	e7da      	b.n	8002f52 <_free_r+0x22>
 8002f9c:	d902      	bls.n	8002fa4 <_free_r+0x74>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	e7d6      	b.n	8002f52 <_free_r+0x22>
 8002fa4:	6820      	ldr	r0, [r4, #0]
 8002fa6:	1821      	adds	r1, r4, r0
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	bf01      	itttt	eq
 8002fac:	6819      	ldreq	r1, [r3, #0]
 8002fae:	685b      	ldreq	r3, [r3, #4]
 8002fb0:	1809      	addeq	r1, r1, r0
 8002fb2:	6021      	streq	r1, [r4, #0]
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6054      	str	r4, [r2, #4]
 8002fb8:	e7cb      	b.n	8002f52 <_free_r+0x22>
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200002c8 	.word	0x200002c8

08002fc0 <sbrk_aligned>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4e0e      	ldr	r6, [pc, #56]	; (8002ffc <sbrk_aligned+0x3c>)
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	6831      	ldr	r1, [r6, #0]
 8002fc8:	4605      	mov	r5, r0
 8002fca:	b911      	cbnz	r1, 8002fd2 <sbrk_aligned+0x12>
 8002fcc:	f000 fbaa 	bl	8003724 <_sbrk_r>
 8002fd0:	6030      	str	r0, [r6, #0]
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f000 fba5 	bl	8003724 <_sbrk_r>
 8002fda:	1c43      	adds	r3, r0, #1
 8002fdc:	d00a      	beq.n	8002ff4 <sbrk_aligned+0x34>
 8002fde:	1cc4      	adds	r4, r0, #3
 8002fe0:	f024 0403 	bic.w	r4, r4, #3
 8002fe4:	42a0      	cmp	r0, r4
 8002fe6:	d007      	beq.n	8002ff8 <sbrk_aligned+0x38>
 8002fe8:	1a21      	subs	r1, r4, r0
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 fb9a 	bl	8003724 <_sbrk_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d101      	bne.n	8002ff8 <sbrk_aligned+0x38>
 8002ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	200002cc 	.word	0x200002cc

08003000 <_malloc_r>:
 8003000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003004:	1ccd      	adds	r5, r1, #3
 8003006:	f025 0503 	bic.w	r5, r5, #3
 800300a:	3508      	adds	r5, #8
 800300c:	2d0c      	cmp	r5, #12
 800300e:	bf38      	it	cc
 8003010:	250c      	movcc	r5, #12
 8003012:	2d00      	cmp	r5, #0
 8003014:	4607      	mov	r7, r0
 8003016:	db01      	blt.n	800301c <_malloc_r+0x1c>
 8003018:	42a9      	cmp	r1, r5
 800301a:	d905      	bls.n	8003028 <_malloc_r+0x28>
 800301c:	230c      	movs	r3, #12
 800301e:	2600      	movs	r6, #0
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	4630      	mov	r0, r6
 8003024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003028:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030fc <_malloc_r+0xfc>
 800302c:	f000 f868 	bl	8003100 <__malloc_lock>
 8003030:	f8d8 3000 	ldr.w	r3, [r8]
 8003034:	461c      	mov	r4, r3
 8003036:	bb5c      	cbnz	r4, 8003090 <_malloc_r+0x90>
 8003038:	4629      	mov	r1, r5
 800303a:	4638      	mov	r0, r7
 800303c:	f7ff ffc0 	bl	8002fc0 <sbrk_aligned>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	4604      	mov	r4, r0
 8003044:	d155      	bne.n	80030f2 <_malloc_r+0xf2>
 8003046:	f8d8 4000 	ldr.w	r4, [r8]
 800304a:	4626      	mov	r6, r4
 800304c:	2e00      	cmp	r6, #0
 800304e:	d145      	bne.n	80030dc <_malloc_r+0xdc>
 8003050:	2c00      	cmp	r4, #0
 8003052:	d048      	beq.n	80030e6 <_malloc_r+0xe6>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	4631      	mov	r1, r6
 8003058:	4638      	mov	r0, r7
 800305a:	eb04 0903 	add.w	r9, r4, r3
 800305e:	f000 fb61 	bl	8003724 <_sbrk_r>
 8003062:	4581      	cmp	r9, r0
 8003064:	d13f      	bne.n	80030e6 <_malloc_r+0xe6>
 8003066:	6821      	ldr	r1, [r4, #0]
 8003068:	4638      	mov	r0, r7
 800306a:	1a6d      	subs	r5, r5, r1
 800306c:	4629      	mov	r1, r5
 800306e:	f7ff ffa7 	bl	8002fc0 <sbrk_aligned>
 8003072:	3001      	adds	r0, #1
 8003074:	d037      	beq.n	80030e6 <_malloc_r+0xe6>
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	442b      	add	r3, r5
 800307a:	6023      	str	r3, [r4, #0]
 800307c:	f8d8 3000 	ldr.w	r3, [r8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d038      	beq.n	80030f6 <_malloc_r+0xf6>
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	42a2      	cmp	r2, r4
 8003088:	d12b      	bne.n	80030e2 <_malloc_r+0xe2>
 800308a:	2200      	movs	r2, #0
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	e00f      	b.n	80030b0 <_malloc_r+0xb0>
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	1b52      	subs	r2, r2, r5
 8003094:	d41f      	bmi.n	80030d6 <_malloc_r+0xd6>
 8003096:	2a0b      	cmp	r2, #11
 8003098:	d917      	bls.n	80030ca <_malloc_r+0xca>
 800309a:	1961      	adds	r1, r4, r5
 800309c:	42a3      	cmp	r3, r4
 800309e:	6025      	str	r5, [r4, #0]
 80030a0:	bf18      	it	ne
 80030a2:	6059      	strne	r1, [r3, #4]
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	bf08      	it	eq
 80030a8:	f8c8 1000 	streq.w	r1, [r8]
 80030ac:	5162      	str	r2, [r4, r5]
 80030ae:	604b      	str	r3, [r1, #4]
 80030b0:	4638      	mov	r0, r7
 80030b2:	f104 060b 	add.w	r6, r4, #11
 80030b6:	f000 f829 	bl	800310c <__malloc_unlock>
 80030ba:	f026 0607 	bic.w	r6, r6, #7
 80030be:	1d23      	adds	r3, r4, #4
 80030c0:	1af2      	subs	r2, r6, r3
 80030c2:	d0ae      	beq.n	8003022 <_malloc_r+0x22>
 80030c4:	1b9b      	subs	r3, r3, r6
 80030c6:	50a3      	str	r3, [r4, r2]
 80030c8:	e7ab      	b.n	8003022 <_malloc_r+0x22>
 80030ca:	42a3      	cmp	r3, r4
 80030cc:	6862      	ldr	r2, [r4, #4]
 80030ce:	d1dd      	bne.n	800308c <_malloc_r+0x8c>
 80030d0:	f8c8 2000 	str.w	r2, [r8]
 80030d4:	e7ec      	b.n	80030b0 <_malloc_r+0xb0>
 80030d6:	4623      	mov	r3, r4
 80030d8:	6864      	ldr	r4, [r4, #4]
 80030da:	e7ac      	b.n	8003036 <_malloc_r+0x36>
 80030dc:	4634      	mov	r4, r6
 80030de:	6876      	ldr	r6, [r6, #4]
 80030e0:	e7b4      	b.n	800304c <_malloc_r+0x4c>
 80030e2:	4613      	mov	r3, r2
 80030e4:	e7cc      	b.n	8003080 <_malloc_r+0x80>
 80030e6:	230c      	movs	r3, #12
 80030e8:	4638      	mov	r0, r7
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	f000 f80e 	bl	800310c <__malloc_unlock>
 80030f0:	e797      	b.n	8003022 <_malloc_r+0x22>
 80030f2:	6025      	str	r5, [r4, #0]
 80030f4:	e7dc      	b.n	80030b0 <_malloc_r+0xb0>
 80030f6:	605b      	str	r3, [r3, #4]
 80030f8:	deff      	udf	#255	; 0xff
 80030fa:	bf00      	nop
 80030fc:	200002c8 	.word	0x200002c8

08003100 <__malloc_lock>:
 8003100:	4801      	ldr	r0, [pc, #4]	; (8003108 <__malloc_lock+0x8>)
 8003102:	f7ff bf13 	b.w	8002f2c <__retarget_lock_acquire_recursive>
 8003106:	bf00      	nop
 8003108:	200002c4 	.word	0x200002c4

0800310c <__malloc_unlock>:
 800310c:	4801      	ldr	r0, [pc, #4]	; (8003114 <__malloc_unlock+0x8>)
 800310e:	f7ff bf0e 	b.w	8002f2e <__retarget_lock_release_recursive>
 8003112:	bf00      	nop
 8003114:	200002c4 	.word	0x200002c4

08003118 <__ssputs_r>:
 8003118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800311c:	461f      	mov	r7, r3
 800311e:	688e      	ldr	r6, [r1, #8]
 8003120:	4682      	mov	sl, r0
 8003122:	42be      	cmp	r6, r7
 8003124:	460c      	mov	r4, r1
 8003126:	4690      	mov	r8, r2
 8003128:	680b      	ldr	r3, [r1, #0]
 800312a:	d82c      	bhi.n	8003186 <__ssputs_r+0x6e>
 800312c:	898a      	ldrh	r2, [r1, #12]
 800312e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003132:	d026      	beq.n	8003182 <__ssputs_r+0x6a>
 8003134:	6965      	ldr	r5, [r4, #20]
 8003136:	6909      	ldr	r1, [r1, #16]
 8003138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800313c:	eba3 0901 	sub.w	r9, r3, r1
 8003140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003144:	1c7b      	adds	r3, r7, #1
 8003146:	444b      	add	r3, r9
 8003148:	106d      	asrs	r5, r5, #1
 800314a:	429d      	cmp	r5, r3
 800314c:	bf38      	it	cc
 800314e:	461d      	movcc	r5, r3
 8003150:	0553      	lsls	r3, r2, #21
 8003152:	d527      	bpl.n	80031a4 <__ssputs_r+0x8c>
 8003154:	4629      	mov	r1, r5
 8003156:	f7ff ff53 	bl	8003000 <_malloc_r>
 800315a:	4606      	mov	r6, r0
 800315c:	b360      	cbz	r0, 80031b8 <__ssputs_r+0xa0>
 800315e:	464a      	mov	r2, r9
 8003160:	6921      	ldr	r1, [r4, #16]
 8003162:	f000 fafd 	bl	8003760 <memcpy>
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	81a3      	strh	r3, [r4, #12]
 8003172:	6126      	str	r6, [r4, #16]
 8003174:	444e      	add	r6, r9
 8003176:	6026      	str	r6, [r4, #0]
 8003178:	463e      	mov	r6, r7
 800317a:	6165      	str	r5, [r4, #20]
 800317c:	eba5 0509 	sub.w	r5, r5, r9
 8003180:	60a5      	str	r5, [r4, #8]
 8003182:	42be      	cmp	r6, r7
 8003184:	d900      	bls.n	8003188 <__ssputs_r+0x70>
 8003186:	463e      	mov	r6, r7
 8003188:	4632      	mov	r2, r6
 800318a:	4641      	mov	r1, r8
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	f000 faaf 	bl	80036f0 <memmove>
 8003192:	2000      	movs	r0, #0
 8003194:	68a3      	ldr	r3, [r4, #8]
 8003196:	1b9b      	subs	r3, r3, r6
 8003198:	60a3      	str	r3, [r4, #8]
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	4433      	add	r3, r6
 800319e:	6023      	str	r3, [r4, #0]
 80031a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a4:	462a      	mov	r2, r5
 80031a6:	f000 fae9 	bl	800377c <_realloc_r>
 80031aa:	4606      	mov	r6, r0
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d1e0      	bne.n	8003172 <__ssputs_r+0x5a>
 80031b0:	4650      	mov	r0, sl
 80031b2:	6921      	ldr	r1, [r4, #16]
 80031b4:	f7ff febc 	bl	8002f30 <_free_r>
 80031b8:	230c      	movs	r3, #12
 80031ba:	f8ca 3000 	str.w	r3, [sl]
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c8:	81a3      	strh	r3, [r4, #12]
 80031ca:	e7e9      	b.n	80031a0 <__ssputs_r+0x88>

080031cc <_svfiprintf_r>:
 80031cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d0:	4698      	mov	r8, r3
 80031d2:	898b      	ldrh	r3, [r1, #12]
 80031d4:	4607      	mov	r7, r0
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	460d      	mov	r5, r1
 80031da:	4614      	mov	r4, r2
 80031dc:	b09d      	sub	sp, #116	; 0x74
 80031de:	d50e      	bpl.n	80031fe <_svfiprintf_r+0x32>
 80031e0:	690b      	ldr	r3, [r1, #16]
 80031e2:	b963      	cbnz	r3, 80031fe <_svfiprintf_r+0x32>
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	f7ff ff0b 	bl	8003000 <_malloc_r>
 80031ea:	6028      	str	r0, [r5, #0]
 80031ec:	6128      	str	r0, [r5, #16]
 80031ee:	b920      	cbnz	r0, 80031fa <_svfiprintf_r+0x2e>
 80031f0:	230c      	movs	r3, #12
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	e0d0      	b.n	800339c <_svfiprintf_r+0x1d0>
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	616b      	str	r3, [r5, #20]
 80031fe:	2300      	movs	r3, #0
 8003200:	9309      	str	r3, [sp, #36]	; 0x24
 8003202:	2320      	movs	r3, #32
 8003204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003208:	2330      	movs	r3, #48	; 0x30
 800320a:	f04f 0901 	mov.w	r9, #1
 800320e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003212:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80033b4 <_svfiprintf_r+0x1e8>
 8003216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800321a:	4623      	mov	r3, r4
 800321c:	469a      	mov	sl, r3
 800321e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003222:	b10a      	cbz	r2, 8003228 <_svfiprintf_r+0x5c>
 8003224:	2a25      	cmp	r2, #37	; 0x25
 8003226:	d1f9      	bne.n	800321c <_svfiprintf_r+0x50>
 8003228:	ebba 0b04 	subs.w	fp, sl, r4
 800322c:	d00b      	beq.n	8003246 <_svfiprintf_r+0x7a>
 800322e:	465b      	mov	r3, fp
 8003230:	4622      	mov	r2, r4
 8003232:	4629      	mov	r1, r5
 8003234:	4638      	mov	r0, r7
 8003236:	f7ff ff6f 	bl	8003118 <__ssputs_r>
 800323a:	3001      	adds	r0, #1
 800323c:	f000 80a9 	beq.w	8003392 <_svfiprintf_r+0x1c6>
 8003240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003242:	445a      	add	r2, fp
 8003244:	9209      	str	r2, [sp, #36]	; 0x24
 8003246:	f89a 3000 	ldrb.w	r3, [sl]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80a1 	beq.w	8003392 <_svfiprintf_r+0x1c6>
 8003250:	2300      	movs	r3, #0
 8003252:	f04f 32ff 	mov.w	r2, #4294967295
 8003256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800325a:	f10a 0a01 	add.w	sl, sl, #1
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	9307      	str	r3, [sp, #28]
 8003262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003266:	931a      	str	r3, [sp, #104]	; 0x68
 8003268:	4654      	mov	r4, sl
 800326a:	2205      	movs	r2, #5
 800326c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003270:	4850      	ldr	r0, [pc, #320]	; (80033b4 <_svfiprintf_r+0x1e8>)
 8003272:	f000 fa67 	bl	8003744 <memchr>
 8003276:	9a04      	ldr	r2, [sp, #16]
 8003278:	b9d8      	cbnz	r0, 80032b2 <_svfiprintf_r+0xe6>
 800327a:	06d0      	lsls	r0, r2, #27
 800327c:	bf44      	itt	mi
 800327e:	2320      	movmi	r3, #32
 8003280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003284:	0711      	lsls	r1, r2, #28
 8003286:	bf44      	itt	mi
 8003288:	232b      	movmi	r3, #43	; 0x2b
 800328a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800328e:	f89a 3000 	ldrb.w	r3, [sl]
 8003292:	2b2a      	cmp	r3, #42	; 0x2a
 8003294:	d015      	beq.n	80032c2 <_svfiprintf_r+0xf6>
 8003296:	4654      	mov	r4, sl
 8003298:	2000      	movs	r0, #0
 800329a:	f04f 0c0a 	mov.w	ip, #10
 800329e:	9a07      	ldr	r2, [sp, #28]
 80032a0:	4621      	mov	r1, r4
 80032a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a6:	3b30      	subs	r3, #48	; 0x30
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d94d      	bls.n	8003348 <_svfiprintf_r+0x17c>
 80032ac:	b1b0      	cbz	r0, 80032dc <_svfiprintf_r+0x110>
 80032ae:	9207      	str	r2, [sp, #28]
 80032b0:	e014      	b.n	80032dc <_svfiprintf_r+0x110>
 80032b2:	eba0 0308 	sub.w	r3, r0, r8
 80032b6:	fa09 f303 	lsl.w	r3, r9, r3
 80032ba:	4313      	orrs	r3, r2
 80032bc:	46a2      	mov	sl, r4
 80032be:	9304      	str	r3, [sp, #16]
 80032c0:	e7d2      	b.n	8003268 <_svfiprintf_r+0x9c>
 80032c2:	9b03      	ldr	r3, [sp, #12]
 80032c4:	1d19      	adds	r1, r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	9103      	str	r1, [sp, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bfbb      	ittet	lt
 80032ce:	425b      	neglt	r3, r3
 80032d0:	f042 0202 	orrlt.w	r2, r2, #2
 80032d4:	9307      	strge	r3, [sp, #28]
 80032d6:	9307      	strlt	r3, [sp, #28]
 80032d8:	bfb8      	it	lt
 80032da:	9204      	strlt	r2, [sp, #16]
 80032dc:	7823      	ldrb	r3, [r4, #0]
 80032de:	2b2e      	cmp	r3, #46	; 0x2e
 80032e0:	d10c      	bne.n	80032fc <_svfiprintf_r+0x130>
 80032e2:	7863      	ldrb	r3, [r4, #1]
 80032e4:	2b2a      	cmp	r3, #42	; 0x2a
 80032e6:	d134      	bne.n	8003352 <_svfiprintf_r+0x186>
 80032e8:	9b03      	ldr	r3, [sp, #12]
 80032ea:	3402      	adds	r4, #2
 80032ec:	1d1a      	adds	r2, r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	9203      	str	r2, [sp, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bfb8      	it	lt
 80032f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80032fa:	9305      	str	r3, [sp, #20]
 80032fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80033b8 <_svfiprintf_r+0x1ec>
 8003300:	2203      	movs	r2, #3
 8003302:	4650      	mov	r0, sl
 8003304:	7821      	ldrb	r1, [r4, #0]
 8003306:	f000 fa1d 	bl	8003744 <memchr>
 800330a:	b138      	cbz	r0, 800331c <_svfiprintf_r+0x150>
 800330c:	2240      	movs	r2, #64	; 0x40
 800330e:	9b04      	ldr	r3, [sp, #16]
 8003310:	eba0 000a 	sub.w	r0, r0, sl
 8003314:	4082      	lsls	r2, r0
 8003316:	4313      	orrs	r3, r2
 8003318:	3401      	adds	r4, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	2206      	movs	r2, #6
 8003322:	4826      	ldr	r0, [pc, #152]	; (80033bc <_svfiprintf_r+0x1f0>)
 8003324:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003328:	f000 fa0c 	bl	8003744 <memchr>
 800332c:	2800      	cmp	r0, #0
 800332e:	d038      	beq.n	80033a2 <_svfiprintf_r+0x1d6>
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <_svfiprintf_r+0x1f4>)
 8003332:	bb1b      	cbnz	r3, 800337c <_svfiprintf_r+0x1b0>
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	3307      	adds	r3, #7
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	3308      	adds	r3, #8
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003342:	4433      	add	r3, r6
 8003344:	9309      	str	r3, [sp, #36]	; 0x24
 8003346:	e768      	b.n	800321a <_svfiprintf_r+0x4e>
 8003348:	460c      	mov	r4, r1
 800334a:	2001      	movs	r0, #1
 800334c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003350:	e7a6      	b.n	80032a0 <_svfiprintf_r+0xd4>
 8003352:	2300      	movs	r3, #0
 8003354:	f04f 0c0a 	mov.w	ip, #10
 8003358:	4619      	mov	r1, r3
 800335a:	3401      	adds	r4, #1
 800335c:	9305      	str	r3, [sp, #20]
 800335e:	4620      	mov	r0, r4
 8003360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003364:	3a30      	subs	r2, #48	; 0x30
 8003366:	2a09      	cmp	r2, #9
 8003368:	d903      	bls.n	8003372 <_svfiprintf_r+0x1a6>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c6      	beq.n	80032fc <_svfiprintf_r+0x130>
 800336e:	9105      	str	r1, [sp, #20]
 8003370:	e7c4      	b.n	80032fc <_svfiprintf_r+0x130>
 8003372:	4604      	mov	r4, r0
 8003374:	2301      	movs	r3, #1
 8003376:	fb0c 2101 	mla	r1, ip, r1, r2
 800337a:	e7f0      	b.n	800335e <_svfiprintf_r+0x192>
 800337c:	ab03      	add	r3, sp, #12
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	462a      	mov	r2, r5
 8003382:	4638      	mov	r0, r7
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <_svfiprintf_r+0x1f8>)
 8003386:	a904      	add	r1, sp, #16
 8003388:	f3af 8000 	nop.w
 800338c:	1c42      	adds	r2, r0, #1
 800338e:	4606      	mov	r6, r0
 8003390:	d1d6      	bne.n	8003340 <_svfiprintf_r+0x174>
 8003392:	89ab      	ldrh	r3, [r5, #12]
 8003394:	065b      	lsls	r3, r3, #25
 8003396:	f53f af2d 	bmi.w	80031f4 <_svfiprintf_r+0x28>
 800339a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800339c:	b01d      	add	sp, #116	; 0x74
 800339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a2:	ab03      	add	r3, sp, #12
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	462a      	mov	r2, r5
 80033a8:	4638      	mov	r0, r7
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <_svfiprintf_r+0x1f8>)
 80033ac:	a904      	add	r1, sp, #16
 80033ae:	f000 f87d 	bl	80034ac <_printf_i>
 80033b2:	e7eb      	b.n	800338c <_svfiprintf_r+0x1c0>
 80033b4:	0800383e 	.word	0x0800383e
 80033b8:	08003844 	.word	0x08003844
 80033bc:	08003848 	.word	0x08003848
 80033c0:	00000000 	.word	0x00000000
 80033c4:	08003119 	.word	0x08003119

080033c8 <_printf_common>:
 80033c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033cc:	4616      	mov	r6, r2
 80033ce:	4699      	mov	r9, r3
 80033d0:	688a      	ldr	r2, [r1, #8]
 80033d2:	690b      	ldr	r3, [r1, #16]
 80033d4:	4607      	mov	r7, r0
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bfb8      	it	lt
 80033da:	4613      	movlt	r3, r2
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033e2:	460c      	mov	r4, r1
 80033e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033e8:	b10a      	cbz	r2, 80033ee <_printf_common+0x26>
 80033ea:	3301      	adds	r3, #1
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	0699      	lsls	r1, r3, #26
 80033f2:	bf42      	ittt	mi
 80033f4:	6833      	ldrmi	r3, [r6, #0]
 80033f6:	3302      	addmi	r3, #2
 80033f8:	6033      	strmi	r3, [r6, #0]
 80033fa:	6825      	ldr	r5, [r4, #0]
 80033fc:	f015 0506 	ands.w	r5, r5, #6
 8003400:	d106      	bne.n	8003410 <_printf_common+0x48>
 8003402:	f104 0a19 	add.w	sl, r4, #25
 8003406:	68e3      	ldr	r3, [r4, #12]
 8003408:	6832      	ldr	r2, [r6, #0]
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	42ab      	cmp	r3, r5
 800340e:	dc2b      	bgt.n	8003468 <_printf_common+0xa0>
 8003410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003414:	1e13      	subs	r3, r2, #0
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	bf18      	it	ne
 800341a:	2301      	movne	r3, #1
 800341c:	0692      	lsls	r2, r2, #26
 800341e:	d430      	bmi.n	8003482 <_printf_common+0xba>
 8003420:	4649      	mov	r1, r9
 8003422:	4638      	mov	r0, r7
 8003424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003428:	47c0      	blx	r8
 800342a:	3001      	adds	r0, #1
 800342c:	d023      	beq.n	8003476 <_printf_common+0xae>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	6922      	ldr	r2, [r4, #16]
 8003432:	f003 0306 	and.w	r3, r3, #6
 8003436:	2b04      	cmp	r3, #4
 8003438:	bf14      	ite	ne
 800343a:	2500      	movne	r5, #0
 800343c:	6833      	ldreq	r3, [r6, #0]
 800343e:	f04f 0600 	mov.w	r6, #0
 8003442:	bf08      	it	eq
 8003444:	68e5      	ldreq	r5, [r4, #12]
 8003446:	f104 041a 	add.w	r4, r4, #26
 800344a:	bf08      	it	eq
 800344c:	1aed      	subeq	r5, r5, r3
 800344e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003452:	bf08      	it	eq
 8003454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003458:	4293      	cmp	r3, r2
 800345a:	bfc4      	itt	gt
 800345c:	1a9b      	subgt	r3, r3, r2
 800345e:	18ed      	addgt	r5, r5, r3
 8003460:	42b5      	cmp	r5, r6
 8003462:	d11a      	bne.n	800349a <_printf_common+0xd2>
 8003464:	2000      	movs	r0, #0
 8003466:	e008      	b.n	800347a <_printf_common+0xb2>
 8003468:	2301      	movs	r3, #1
 800346a:	4652      	mov	r2, sl
 800346c:	4649      	mov	r1, r9
 800346e:	4638      	mov	r0, r7
 8003470:	47c0      	blx	r8
 8003472:	3001      	adds	r0, #1
 8003474:	d103      	bne.n	800347e <_printf_common+0xb6>
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347e:	3501      	adds	r5, #1
 8003480:	e7c1      	b.n	8003406 <_printf_common+0x3e>
 8003482:	2030      	movs	r0, #48	; 0x30
 8003484:	18e1      	adds	r1, r4, r3
 8003486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003490:	4422      	add	r2, r4
 8003492:	3302      	adds	r3, #2
 8003494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003498:	e7c2      	b.n	8003420 <_printf_common+0x58>
 800349a:	2301      	movs	r3, #1
 800349c:	4622      	mov	r2, r4
 800349e:	4649      	mov	r1, r9
 80034a0:	4638      	mov	r0, r7
 80034a2:	47c0      	blx	r8
 80034a4:	3001      	adds	r0, #1
 80034a6:	d0e6      	beq.n	8003476 <_printf_common+0xae>
 80034a8:	3601      	adds	r6, #1
 80034aa:	e7d9      	b.n	8003460 <_printf_common+0x98>

080034ac <_printf_i>:
 80034ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034b0:	7e0f      	ldrb	r7, [r1, #24]
 80034b2:	4691      	mov	r9, r2
 80034b4:	2f78      	cmp	r7, #120	; 0x78
 80034b6:	4680      	mov	r8, r0
 80034b8:	460c      	mov	r4, r1
 80034ba:	469a      	mov	sl, r3
 80034bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034c2:	d807      	bhi.n	80034d4 <_printf_i+0x28>
 80034c4:	2f62      	cmp	r7, #98	; 0x62
 80034c6:	d80a      	bhi.n	80034de <_printf_i+0x32>
 80034c8:	2f00      	cmp	r7, #0
 80034ca:	f000 80d5 	beq.w	8003678 <_printf_i+0x1cc>
 80034ce:	2f58      	cmp	r7, #88	; 0x58
 80034d0:	f000 80c1 	beq.w	8003656 <_printf_i+0x1aa>
 80034d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034dc:	e03a      	b.n	8003554 <_printf_i+0xa8>
 80034de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034e2:	2b15      	cmp	r3, #21
 80034e4:	d8f6      	bhi.n	80034d4 <_printf_i+0x28>
 80034e6:	a101      	add	r1, pc, #4	; (adr r1, 80034ec <_printf_i+0x40>)
 80034e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034ec:	08003545 	.word	0x08003545
 80034f0:	08003559 	.word	0x08003559
 80034f4:	080034d5 	.word	0x080034d5
 80034f8:	080034d5 	.word	0x080034d5
 80034fc:	080034d5 	.word	0x080034d5
 8003500:	080034d5 	.word	0x080034d5
 8003504:	08003559 	.word	0x08003559
 8003508:	080034d5 	.word	0x080034d5
 800350c:	080034d5 	.word	0x080034d5
 8003510:	080034d5 	.word	0x080034d5
 8003514:	080034d5 	.word	0x080034d5
 8003518:	0800365f 	.word	0x0800365f
 800351c:	08003585 	.word	0x08003585
 8003520:	08003619 	.word	0x08003619
 8003524:	080034d5 	.word	0x080034d5
 8003528:	080034d5 	.word	0x080034d5
 800352c:	08003681 	.word	0x08003681
 8003530:	080034d5 	.word	0x080034d5
 8003534:	08003585 	.word	0x08003585
 8003538:	080034d5 	.word	0x080034d5
 800353c:	080034d5 	.word	0x080034d5
 8003540:	08003621 	.word	0x08003621
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	1d1a      	adds	r2, r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	602a      	str	r2, [r5, #0]
 800354c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003554:	2301      	movs	r3, #1
 8003556:	e0a0      	b.n	800369a <_printf_i+0x1ee>
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	682b      	ldr	r3, [r5, #0]
 800355c:	0607      	lsls	r7, r0, #24
 800355e:	f103 0104 	add.w	r1, r3, #4
 8003562:	6029      	str	r1, [r5, #0]
 8003564:	d501      	bpl.n	800356a <_printf_i+0xbe>
 8003566:	681e      	ldr	r6, [r3, #0]
 8003568:	e003      	b.n	8003572 <_printf_i+0xc6>
 800356a:	0646      	lsls	r6, r0, #25
 800356c:	d5fb      	bpl.n	8003566 <_printf_i+0xba>
 800356e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003572:	2e00      	cmp	r6, #0
 8003574:	da03      	bge.n	800357e <_printf_i+0xd2>
 8003576:	232d      	movs	r3, #45	; 0x2d
 8003578:	4276      	negs	r6, r6
 800357a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800357e:	230a      	movs	r3, #10
 8003580:	4859      	ldr	r0, [pc, #356]	; (80036e8 <_printf_i+0x23c>)
 8003582:	e012      	b.n	80035aa <_printf_i+0xfe>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	1d19      	adds	r1, r3, #4
 800358a:	6029      	str	r1, [r5, #0]
 800358c:	0605      	lsls	r5, r0, #24
 800358e:	d501      	bpl.n	8003594 <_printf_i+0xe8>
 8003590:	681e      	ldr	r6, [r3, #0]
 8003592:	e002      	b.n	800359a <_printf_i+0xee>
 8003594:	0641      	lsls	r1, r0, #25
 8003596:	d5fb      	bpl.n	8003590 <_printf_i+0xe4>
 8003598:	881e      	ldrh	r6, [r3, #0]
 800359a:	2f6f      	cmp	r7, #111	; 0x6f
 800359c:	bf0c      	ite	eq
 800359e:	2308      	moveq	r3, #8
 80035a0:	230a      	movne	r3, #10
 80035a2:	4851      	ldr	r0, [pc, #324]	; (80036e8 <_printf_i+0x23c>)
 80035a4:	2100      	movs	r1, #0
 80035a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035aa:	6865      	ldr	r5, [r4, #4]
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	bfa8      	it	ge
 80035b0:	6821      	ldrge	r1, [r4, #0]
 80035b2:	60a5      	str	r5, [r4, #8]
 80035b4:	bfa4      	itt	ge
 80035b6:	f021 0104 	bicge.w	r1, r1, #4
 80035ba:	6021      	strge	r1, [r4, #0]
 80035bc:	b90e      	cbnz	r6, 80035c2 <_printf_i+0x116>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	d04b      	beq.n	800365a <_printf_i+0x1ae>
 80035c2:	4615      	mov	r5, r2
 80035c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80035c8:	fb03 6711 	mls	r7, r3, r1, r6
 80035cc:	5dc7      	ldrb	r7, [r0, r7]
 80035ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035d2:	4637      	mov	r7, r6
 80035d4:	42bb      	cmp	r3, r7
 80035d6:	460e      	mov	r6, r1
 80035d8:	d9f4      	bls.n	80035c4 <_printf_i+0x118>
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d10b      	bne.n	80035f6 <_printf_i+0x14a>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	07de      	lsls	r6, r3, #31
 80035e2:	d508      	bpl.n	80035f6 <_printf_i+0x14a>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	6861      	ldr	r1, [r4, #4]
 80035e8:	4299      	cmp	r1, r3
 80035ea:	bfde      	ittt	le
 80035ec:	2330      	movle	r3, #48	; 0x30
 80035ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035f6:	1b52      	subs	r2, r2, r5
 80035f8:	6122      	str	r2, [r4, #16]
 80035fa:	464b      	mov	r3, r9
 80035fc:	4621      	mov	r1, r4
 80035fe:	4640      	mov	r0, r8
 8003600:	f8cd a000 	str.w	sl, [sp]
 8003604:	aa03      	add	r2, sp, #12
 8003606:	f7ff fedf 	bl	80033c8 <_printf_common>
 800360a:	3001      	adds	r0, #1
 800360c:	d14a      	bne.n	80036a4 <_printf_i+0x1f8>
 800360e:	f04f 30ff 	mov.w	r0, #4294967295
 8003612:	b004      	add	sp, #16
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	f043 0320 	orr.w	r3, r3, #32
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	2778      	movs	r7, #120	; 0x78
 8003622:	4832      	ldr	r0, [pc, #200]	; (80036ec <_printf_i+0x240>)
 8003624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	6829      	ldr	r1, [r5, #0]
 800362c:	061f      	lsls	r7, r3, #24
 800362e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003632:	d402      	bmi.n	800363a <_printf_i+0x18e>
 8003634:	065f      	lsls	r7, r3, #25
 8003636:	bf48      	it	mi
 8003638:	b2b6      	uxthmi	r6, r6
 800363a:	07df      	lsls	r7, r3, #31
 800363c:	bf48      	it	mi
 800363e:	f043 0320 	orrmi.w	r3, r3, #32
 8003642:	6029      	str	r1, [r5, #0]
 8003644:	bf48      	it	mi
 8003646:	6023      	strmi	r3, [r4, #0]
 8003648:	b91e      	cbnz	r6, 8003652 <_printf_i+0x1a6>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f023 0320 	bic.w	r3, r3, #32
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	2310      	movs	r3, #16
 8003654:	e7a6      	b.n	80035a4 <_printf_i+0xf8>
 8003656:	4824      	ldr	r0, [pc, #144]	; (80036e8 <_printf_i+0x23c>)
 8003658:	e7e4      	b.n	8003624 <_printf_i+0x178>
 800365a:	4615      	mov	r5, r2
 800365c:	e7bd      	b.n	80035da <_printf_i+0x12e>
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	6826      	ldr	r6, [r4, #0]
 8003662:	1d18      	adds	r0, r3, #4
 8003664:	6961      	ldr	r1, [r4, #20]
 8003666:	6028      	str	r0, [r5, #0]
 8003668:	0635      	lsls	r5, r6, #24
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	d501      	bpl.n	8003672 <_printf_i+0x1c6>
 800366e:	6019      	str	r1, [r3, #0]
 8003670:	e002      	b.n	8003678 <_printf_i+0x1cc>
 8003672:	0670      	lsls	r0, r6, #25
 8003674:	d5fb      	bpl.n	800366e <_printf_i+0x1c2>
 8003676:	8019      	strh	r1, [r3, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	4615      	mov	r5, r2
 800367c:	6123      	str	r3, [r4, #16]
 800367e:	e7bc      	b.n	80035fa <_printf_i+0x14e>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	2100      	movs	r1, #0
 8003684:	1d1a      	adds	r2, r3, #4
 8003686:	602a      	str	r2, [r5, #0]
 8003688:	681d      	ldr	r5, [r3, #0]
 800368a:	6862      	ldr	r2, [r4, #4]
 800368c:	4628      	mov	r0, r5
 800368e:	f000 f859 	bl	8003744 <memchr>
 8003692:	b108      	cbz	r0, 8003698 <_printf_i+0x1ec>
 8003694:	1b40      	subs	r0, r0, r5
 8003696:	6060      	str	r0, [r4, #4]
 8003698:	6863      	ldr	r3, [r4, #4]
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	2300      	movs	r3, #0
 800369e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036a2:	e7aa      	b.n	80035fa <_printf_i+0x14e>
 80036a4:	462a      	mov	r2, r5
 80036a6:	4649      	mov	r1, r9
 80036a8:	4640      	mov	r0, r8
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	47d0      	blx	sl
 80036ae:	3001      	adds	r0, #1
 80036b0:	d0ad      	beq.n	800360e <_printf_i+0x162>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	079b      	lsls	r3, r3, #30
 80036b6:	d413      	bmi.n	80036e0 <_printf_i+0x234>
 80036b8:	68e0      	ldr	r0, [r4, #12]
 80036ba:	9b03      	ldr	r3, [sp, #12]
 80036bc:	4298      	cmp	r0, r3
 80036be:	bfb8      	it	lt
 80036c0:	4618      	movlt	r0, r3
 80036c2:	e7a6      	b.n	8003612 <_printf_i+0x166>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4632      	mov	r2, r6
 80036c8:	4649      	mov	r1, r9
 80036ca:	4640      	mov	r0, r8
 80036cc:	47d0      	blx	sl
 80036ce:	3001      	adds	r0, #1
 80036d0:	d09d      	beq.n	800360e <_printf_i+0x162>
 80036d2:	3501      	adds	r5, #1
 80036d4:	68e3      	ldr	r3, [r4, #12]
 80036d6:	9903      	ldr	r1, [sp, #12]
 80036d8:	1a5b      	subs	r3, r3, r1
 80036da:	42ab      	cmp	r3, r5
 80036dc:	dcf2      	bgt.n	80036c4 <_printf_i+0x218>
 80036de:	e7eb      	b.n	80036b8 <_printf_i+0x20c>
 80036e0:	2500      	movs	r5, #0
 80036e2:	f104 0619 	add.w	r6, r4, #25
 80036e6:	e7f5      	b.n	80036d4 <_printf_i+0x228>
 80036e8:	0800384f 	.word	0x0800384f
 80036ec:	08003860 	.word	0x08003860

080036f0 <memmove>:
 80036f0:	4288      	cmp	r0, r1
 80036f2:	b510      	push	{r4, lr}
 80036f4:	eb01 0402 	add.w	r4, r1, r2
 80036f8:	d902      	bls.n	8003700 <memmove+0x10>
 80036fa:	4284      	cmp	r4, r0
 80036fc:	4623      	mov	r3, r4
 80036fe:	d807      	bhi.n	8003710 <memmove+0x20>
 8003700:	1e43      	subs	r3, r0, #1
 8003702:	42a1      	cmp	r1, r4
 8003704:	d008      	beq.n	8003718 <memmove+0x28>
 8003706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800370a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800370e:	e7f8      	b.n	8003702 <memmove+0x12>
 8003710:	4601      	mov	r1, r0
 8003712:	4402      	add	r2, r0
 8003714:	428a      	cmp	r2, r1
 8003716:	d100      	bne.n	800371a <memmove+0x2a>
 8003718:	bd10      	pop	{r4, pc}
 800371a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800371e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003722:	e7f7      	b.n	8003714 <memmove+0x24>

08003724 <_sbrk_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	2300      	movs	r3, #0
 8003728:	4d05      	ldr	r5, [pc, #20]	; (8003740 <_sbrk_r+0x1c>)
 800372a:	4604      	mov	r4, r0
 800372c:	4608      	mov	r0, r1
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	f7fd fa92 	bl	8000c58 <_sbrk>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_sbrk_r+0x1a>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_sbrk_r+0x1a>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	200002c0 	.word	0x200002c0

08003744 <memchr>:
 8003744:	4603      	mov	r3, r0
 8003746:	b510      	push	{r4, lr}
 8003748:	b2c9      	uxtb	r1, r1
 800374a:	4402      	add	r2, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	4618      	mov	r0, r3
 8003750:	d101      	bne.n	8003756 <memchr+0x12>
 8003752:	2000      	movs	r0, #0
 8003754:	e003      	b.n	800375e <memchr+0x1a>
 8003756:	7804      	ldrb	r4, [r0, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	428c      	cmp	r4, r1
 800375c:	d1f6      	bne.n	800374c <memchr+0x8>
 800375e:	bd10      	pop	{r4, pc}

08003760 <memcpy>:
 8003760:	440a      	add	r2, r1
 8003762:	4291      	cmp	r1, r2
 8003764:	f100 33ff 	add.w	r3, r0, #4294967295
 8003768:	d100      	bne.n	800376c <memcpy+0xc>
 800376a:	4770      	bx	lr
 800376c:	b510      	push	{r4, lr}
 800376e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003772:	4291      	cmp	r1, r2
 8003774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003778:	d1f9      	bne.n	800376e <memcpy+0xe>
 800377a:	bd10      	pop	{r4, pc}

0800377c <_realloc_r>:
 800377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003780:	4680      	mov	r8, r0
 8003782:	4614      	mov	r4, r2
 8003784:	460e      	mov	r6, r1
 8003786:	b921      	cbnz	r1, 8003792 <_realloc_r+0x16>
 8003788:	4611      	mov	r1, r2
 800378a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800378e:	f7ff bc37 	b.w	8003000 <_malloc_r>
 8003792:	b92a      	cbnz	r2, 80037a0 <_realloc_r+0x24>
 8003794:	f7ff fbcc 	bl	8002f30 <_free_r>
 8003798:	4625      	mov	r5, r4
 800379a:	4628      	mov	r0, r5
 800379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037a0:	f000 f81b 	bl	80037da <_malloc_usable_size_r>
 80037a4:	4284      	cmp	r4, r0
 80037a6:	4607      	mov	r7, r0
 80037a8:	d802      	bhi.n	80037b0 <_realloc_r+0x34>
 80037aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037ae:	d812      	bhi.n	80037d6 <_realloc_r+0x5a>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4640      	mov	r0, r8
 80037b4:	f7ff fc24 	bl	8003000 <_malloc_r>
 80037b8:	4605      	mov	r5, r0
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d0ed      	beq.n	800379a <_realloc_r+0x1e>
 80037be:	42bc      	cmp	r4, r7
 80037c0:	4622      	mov	r2, r4
 80037c2:	4631      	mov	r1, r6
 80037c4:	bf28      	it	cs
 80037c6:	463a      	movcs	r2, r7
 80037c8:	f7ff ffca 	bl	8003760 <memcpy>
 80037cc:	4631      	mov	r1, r6
 80037ce:	4640      	mov	r0, r8
 80037d0:	f7ff fbae 	bl	8002f30 <_free_r>
 80037d4:	e7e1      	b.n	800379a <_realloc_r+0x1e>
 80037d6:	4635      	mov	r5, r6
 80037d8:	e7df      	b.n	800379a <_realloc_r+0x1e>

080037da <_malloc_usable_size_r>:
 80037da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037de:	1f18      	subs	r0, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfbc      	itt	lt
 80037e4:	580b      	ldrlt	r3, [r1, r0]
 80037e6:	18c0      	addlt	r0, r0, r3
 80037e8:	4770      	bx	lr
	...

080037ec <_init>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr

080037f8 <_fini>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr
